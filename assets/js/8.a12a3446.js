(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{328:function(t,e,r){"use strict";r.r(e);var a=r(33),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"前端面试宝典-自用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前端面试宝典-自用"}},[t._v("#")]),t._v(" 前端面试宝典(自用)")]),t._v(" "),r("my-button"),t._v(" "),r("h2",{attrs:{id:"前言-test"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言-test"}},[t._v("#")]),t._v(" 前言 test")]),t._v(" "),r("p",[t._v("经过艰苦卓绝的面试历程，终于拿到了心仪的offer。期间总结了一些面试题供各位参考，涵盖面很广，并且面的都是知名大厂，所以这些题还是很有代表性的，都掌握以后一面基础面应该没什么问题，二面也能应付大半，奉上：")]),t._v(" "),r("h2",{attrs:{id:"css相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#css相关"}},[t._v("#")]),t._v(" css相关")]),t._v(" "),r("h3",{attrs:{id:"_1-万能居中"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-万能居中"}},[t._v("#")]),t._v(" 1. 万能居中")]),t._v(" "),r("p",[t._v("1.margin: 0 auto;水平\n2.text-align: center;水平\n3.行高，垂直\n4.表格，center,middle；水平垂直\n5.display:table-cell；模拟表格，all\n6.绝对定位，50%减自身宽高\n7.绝对定位，上下左右全0，margin:auto\n8.绝对定位加相对定位。不需要知道宽高\n9.IE6，IE7：给父元素设一个font-size:高度/1.14,vertical-align:middle")]),t._v(" "),r("h3",{attrs:{id:"_2-bfc优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-bfc优化"}},[t._v("#")]),t._v(" 2. "),r("a",{attrs:{href:"https://www.jianshu.com/p/0d713b32cd0d",target:"_blank",rel:"noopener noreferrer"}},[t._v("BFC优化"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("块格式化上下文, 特性:")]),t._v(" "),r("ul",[r("li",[t._v("使 BFC 内部浮动元素不会到处乱跑（清除浮动）；")]),t._v(" "),r("li",[t._v("和浮动元素产生边界（在非浮动元素加margin）。")])]),t._v(" "),r("h3",{attrs:{id:"_3-盒模型哪两种模式？什么区别？如何设置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-盒模型哪两种模式？什么区别？如何设置"}},[t._v("#")]),t._v(" 3. 盒模型哪两种模式？什么区别？如何设置")]),t._v(" "),r("ul",[r("li",[t._v("标准模式: box-sizing: content-box(默认); 宽高不包括内边距和边框")]),t._v(" "),r("li",[t._v("怪异模式: box-sizing: border-box")])]),t._v(" "),r("h3",{attrs:{id:"_4-常用清除浮动的方法，如不清除浮动会怎样？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-常用清除浮动的方法，如不清除浮动会怎样？"}},[t._v("#")]),t._v(" 4. "),r("a",{attrs:{href:"https://blog.csdn.net/h_qingyi/article/details/81269667",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用清除浮动的方法，如不清除浮动会怎样？"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("当父元素不给高度的时候，内部元素不浮动时会撑开, 而浮动的时候，父元素变成一条线, 造成塌陷.")]),t._v(" "),r("ul",[r("li",[t._v("额外标签法（在最后一个浮动标签后，新加一个标签，给其设置clear：both；）（不推荐）")]),t._v(" "),r("li",[t._v("父元素添加overflow:hidden; (触发BFC)")]),t._v(" "),r("li",[t._v("使用after伪元素清除浮动（推荐使用）")]),t._v(" "),r("li",[t._v("使用before和after双伪元素清除浮动")])]),t._v(" "),r("h3",{attrs:{id:"_5-删格化的原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-删格化的原理"}},[t._v("#")]),t._v(" 5. 删格化的原理")]),t._v(" "),r("p",[t._v("比如antd的row和col, 将一行等分为24份, col是几就占几份, 底层按百分比实现; 结合媒体查询, 可以实现响应式")]),t._v(" "),r("h3",{attrs:{id:"_6-纯css实现三角形"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-纯css实现三角形"}},[t._v("#")]),t._v(" 6. 纯css实现三角形")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 通过设置border\n.box\n        {\n            width:0px;\n            height:0px;\n\n            border-top:50px solid rgba(0,0,0,0);\n            border-right:50px solid  rgba(0,0,0,0);\n            border-bottom:50px solid green;\n            border-left:50px solid  rgba(0,0,0,0);\n            }\n")])])]),r("h3",{attrs:{id:"_7-高度不定，宽100-，内一div高不确定，如何实现垂直居中？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-高度不定，宽100-，内一div高不确定，如何实现垂直居中？"}},[t._v("#")]),t._v(" 7. 高度不定，宽100%，内一div高不确定，如何实现垂直居中？")]),t._v(" "),r("ul",[r("li",[t._v("verticle-align: middle;")]),t._v(" "),r("li",[t._v("绝对定位50%加translateY(-50%)")]),t._v(" "),r("li",[t._v("绝对定位，上下左右全0，margin:auto")])]),t._v(" "),r("h3",{attrs:{id:"_8-至少两种方式实现自适应布局"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-至少两种方式实现自适应布局"}},[t._v("#")]),t._v(" 8. 至少两种方式实现自适应布局")]),t._v(" "),r("ul",[r("li",[t._v("rem, em")]),t._v(" "),r("li",[t._v("vh, vw")]),t._v(" "),r("li",[t._v("百分比")]),t._v(" "),r("li",[t._v("媒体查询")]),t._v(" "),r("li",[t._v("bs, antd等的栅格布局")])]),t._v(" "),r("h3",{attrs:{id:"_9-设置一段文字的大小为6px"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-设置一段文字的大小为6px"}},[t._v("#")]),t._v(" 9. 设置一段文字的大小为6px")]),t._v(" "),r("ul",[r("li",[t._v("谷歌最小12px, 其他浏览器可以更小")]),t._v(" "),r("li",[t._v("通过transform: scale实现")])]),t._v(" "),r("h3",{attrs:{id:"_10-css菊花图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-css菊花图"}},[t._v("#")]),t._v(" 10. "),r("a",{attrs:{href:"https://blog.csdn.net/candy_home/article/details/81540247",target:"_blank",rel:"noopener noreferrer"}},[t._v("css菊花图"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("四个小圆点一直旋转")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 父标签\nanimation: antRotate 1.2s infinite linear;\n// 子标签\nanimation: antSpin 1s infinite linear;\n@keyframe antSpin {\n  to {\n    opacity: 1 \n  }\n}\n@keyframe antRotate {\n  to {\n    transform: rotate(405)\n  }\n}\n// animation-delay: 逐个延迟0.4s\n")])])]),r("h3",{attrs:{id:"_11-关于em"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-关于em"}},[t._v("#")]),t._v(" 11. 关于em")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(' <div style="font-size: 20px">\n      123\n      <div style="font-size: 2em;width: 2em">456</div>\n </div>\n// 此时子元素的font-size为40px, 宽度为80px(还要乘以子元素font-size的系数)\n')])])]),r("h3",{attrs:{id:"_12-关于vh-vw"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12-关于vh-vw"}},[t._v("#")]),t._v(" 12. 关于vh, vw")]),t._v(" "),r("p",[t._v("vw：viewpoint width，视窗宽度，1vw等于视窗宽度的1%。\nvh：viewpoint height，视窗高度，1vh等于视窗高度的1%。\nvmin：vw和vh中较小的那个。\nvmax：vw和vh中较大的那个。")]),t._v(" "),r("h3",{attrs:{id:"_13-flex布局"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_13-flex布局"}},[t._v("#")]),t._v(" 13. "),r("a",{attrs:{href:"https://www.runoob.com/w3cnote/flex-grammar.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flex布局"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("flex-direction控制主副轴")]),t._v(" "),r("li",[t._v("flex-wrap控制换行(默认不换行)")]),t._v(" "),r("li",[t._v("flex-flow是上两个的结合")]),t._v(" "),r("li",[t._v("justify-content主轴对齐方式")]),t._v(" "),r("li",[t._v("align-items交叉轴对齐方式")])]),t._v(" "),r("h3",{attrs:{id:"_14-overflow原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14-overflow原理"}},[t._v("#")]),t._v(" 14. "),r("a",{attrs:{href:"https://www.jianshu.com/p/7e04ed3f4bea",target:"_blank",rel:"noopener noreferrer"}},[t._v("overflow原理"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[r("code",[t._v("overflow: hidden")]),t._v("能清除块内子元素的浮动影响. 因为该属性进行超出隐藏时需要计算盒子内所有元素的高度, 所以会隐式清除浮动")]),t._v(" "),r("li",[t._v("创建BFC条件(满足一个):\n"),r("ul",[r("li",[t._v("float的值不为none；")]),t._v(" "),r("li",[t._v("overflow的值不为visible；")]),t._v(" "),r("li",[t._v("position的值为fixed / absolute；")]),t._v(" "),r("li",[t._v("display的值为table-cell / table-caption / inline-block / flex / inline-flex。")])])])]),t._v(" "),r("h3",{attrs:{id:"_15-实现自适应的正方形"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_15-实现自适应的正方形"}},[t._v("#")]),t._v(" 15. 实现自适应的正方形:")]),t._v(" "),r("ul",[r("li",[t._v("使用vw, vh")]),t._v(" "),r("li",[r("code",[t._v("width")]),t._v("百分比, "),r("code",[t._v("height: 0")]),t._v(", "),r("code",[t._v("padding-top(bottom): 50%")])])]),t._v(" "),r("h3",{attrs:{id:"_16-标准模式和怪异模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_16-标准模式和怪异模式"}},[t._v("#")]),t._v(" 16. 标准模式和怪异模式")]),t._v(" "),r("ul",[r("li",[t._v("document.compatMode属性可以判断是否是标准模式，当 document.compatMode为“CSS1Compat”，是标准模式，“BackCompat”是怪异模式。")]),t._v(" "),r("li",[t._v("怪异模式是为了兼容旧版本的浏览器, 因为IE低版本document.documentElement.clientWidth获取不到")]),t._v(" "),r("li",[t._v("怪异模式盒模型: "),r("code",[t._v("box-sizing: border-box")]),t._v("; 标准模式: "),r("code",[t._v("box-sizing: content-box")])])]),t._v(" "),r("h3",{attrs:{id:"_17-css3实现环形进度条"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_17-css3实现环形进度条"}},[t._v("#")]),t._v(" 17. CSS3实现环形进度条")]),t._v(" "),r("p",[t._v("两个对半矩形遮罩, 使用"),r("code",[t._v("rotate")]),t._v("以及"),r("code",[t._v("overflow: hidden")]),t._v("进行旋转")]),t._v(" "),r("h3",{attrs:{id:"_18-css优先级"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_18-css优先级"}},[t._v("#")]),t._v(" 18. "),r("a",{attrs:{href:"https://www.cnblogs.com/wangmeijian/p/4207433.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("css优先级"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("选择器的特殊性值表述为4个部分，用0,0,0,0表示。")]),t._v(" "),r("ul",[r("li",[t._v("ID选择器的特殊性值，加0,1,0,0。")]),t._v(" "),r("li",[t._v("类选择器、属性选择器或伪类，加0,0,1,0。")]),t._v(" "),r("li",[t._v("元素和伪元素，加0,0,0,1。")]),t._v(" "),r("li",[t._v("通配选择器*对特殊性没有贡献，即0,0,0,0。")]),t._v(" "),r("li",[t._v("最后比较特殊的一个标志!important（权重），它没有特殊性值，但它的优先级是最高的，为了方便记忆，可以认为它的特殊性值为1,0,0,0,0。")])]),t._v(" "),r("h2",{attrs:{id:"js相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js相关"}},[t._v("#")]),t._v(" JS相关")]),t._v(" "),r("h3",{attrs:{id:"_1-es5和es6继承方式区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-es5和es6继承方式区别"}},[t._v("#")]),t._v(" 1. ES5和ES6继承方式区别")]),t._v(" "),r("ul",[r("li",[t._v("ES5定义类以函数形式, 以prototype来实现继承")]),t._v(" "),r("li",[t._v("ES6以class形式定义类, 以extend形式继承")])]),t._v(" "),r("h3",{attrs:{id:"_2-generator了解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-generator了解"}},[t._v("#")]),t._v(" 2. "),r("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/generator",target:"_blank",rel:"noopener noreferrer"}},[t._v("Generator了解"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("ES6 提供的一种异步编程解决方案, Generator 函数是一个状态机，封装了多个内部状态。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloWorldGenerator();\n")])])]),r("p",[t._v("调用后返回指向内部状态的指针, 调用next()才会移向下一个状态, 参数:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("hw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n")])])]),r("h3",{attrs:{id:"_3-手写promise实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-手写promise实现"}},[t._v("#")]),t._v(" 3. 手写Promise实现")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("var myPromise = new Promise((resolve, reject) => {\n  // 需要执行的代码\n  ...\n  if (/* 异步执行成功 */) {\n    resolve(value)\n  } else if (/* 异步执行失败 */) {\n    reject(error)\n  }\n})\n\nmyPromise.then((value) => {\n  // 成功后调用, 使用value值\n}, (error) => {\n  // 失败后调用, 获取错误信息error\n})\n")])])]),r("h3",{attrs:{id:"_4-promise优缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-promise优缺点"}},[t._v("#")]),t._v(" 4. Promise优缺点")]),t._v(" "),r("ul",[r("li",[t._v("优点: 解决回调地狱, 对异步任务写法更标准化与简洁化")]),t._v(" "),r("li",[t._v("缺点: 首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消; 其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部; 第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成).\n极简版promise封装:")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function promise () {\n  this.msg = '' // 存放value和error\n  this.status = 'pending'\n  var that = this\n  var process = arguments[0]\n\n  process (function () {\n    that.status = 'fulfilled'\n    that.msg = arguments[0]\n  }, function () {\n    that.status = 'rejected'\n    that.msg = arguments[0]\n  })\n  return this\n}\n\npromise.prototype.then = function () {\n  if (this.status === 'fulfilled') {\n    arguments[0](this.msg)\n  } else if (this.status === 'rejected' && arguments[1]) {\n    arguments[1](this.msg)\n  }\n}\n")])])]),r("h3",{attrs:{id:"_5-观察者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-观察者模式"}},[t._v("#")]),t._v(" 5. "),r("a",{attrs:{href:"https://www.cnblogs.com/gradolabs/p/4786782.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("观察者模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("又称发布-订阅模式, 举例子说明.\n实现: 发布者管理订阅者队列, 并有新消息推送功能. 订阅者仅关注更新就行")]),t._v(" "),r("h3",{attrs:{id:"_6-手写实现bind"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-手写实现bind"}},[t._v("#")]),t._v(" 6. 手写实现bind")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Function.prototype.bind = function () {\n   // 保存原函数\n  var self = this\n  // 取出第一个参数作为上下文, 相当于[].shift.call(arguments)\n  var context = Array.prototype.shift.call(arguments)\n  // 取剩余的参数作为arg; 因为arguments是伪数组, 所以要转化为数组才能使用数组方法\n  var arg = Array.prototype.slice.call(arguments)\n  // 返回一个新函数\n  return function () {\n    // 绑定上下文并传参\n    self.apply(context, Array.prototype.concat.call(arg, Array.prototype.slice.call(arguments)))\n  }\n}\n")])])]),r("h3",{attrs:{id:"_7-手写实现4种继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-手写实现4种继承"}},[t._v("#")]),t._v(" 7. "),r("a",{attrs:{href:"https://www.jianshu.com/p/159b07f2d877",target:"_blank",rel:"noopener noreferrer"}},[t._v("手写实现4种继承"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function Father () {}\nfunction Child () {}\n// 1. 原型继承\nChild.prototype = new Father()\n// 2. 构造继承\nfunction Child (name) {\n  Father.call(this, name)\n}\n// 3. 组合继承\nfunction Child (name) {\n  Father.call(this, name)\n}\nChild.prototype = new Father()\n// 4. 寄生继承\nfunction cloneObj (o) {\n  var clone = object.create(o)\n  clone.sayName = ...\n  return clone\n}\n// 5. 寄生组合继承\n// 6. ES6 class extend继承\n")])])]),r("h3",{attrs:{id:"_9-http状态码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-http状态码"}},[t._v("#")]),t._v(" 9. http状态码")]),t._v(" "),r("ul",[r("li",[t._v("1**: 服务器收到请求, 需请求者进一步操作")]),t._v(" "),r("li",[t._v("2**: 请求成功")]),t._v(" "),r("li",[t._v("3**: 重定向, 资源被转移到其他URL了")]),t._v(" "),r("li",[t._v("4**: 客户端错误, 请求语法错误或没有找到相应资源")]),t._v(" "),r("li",[t._v("5**: 服务端错误, server error")]),t._v(" "),r("li",[t._v("304:  Not Modified. 指定日期后未修改, 不返回资源")])]),t._v(" "),r("h3",{attrs:{id:"_10-object-create实现（原型式继承，特点：实例的-proto-指向构造函数本身）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-object-create实现（原型式继承，特点：实例的-proto-指向构造函数本身）"}},[t._v("#")]),t._v(" 10. Object.create实现（原型式继承，特点：实例的__proto__指向构造函数本身）")]),t._v(" "),r("h3",{attrs:{id:"_11-async和await：-es8"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-async和await：-es8"}},[t._v("#")]),t._v(" 11. async和await：(ES8)")]),t._v(" "),r("ul",[r("li",[t._v("Generator函数的语法糖，将*改成async，将yield换成await。")]),t._v(" "),r("li",[t._v("是对Generator函数的改进, 返回promise。")]),t._v(" "),r("li",[t._v("异步写法同步化，遇到await先返回，执行完异步再执行接下来的.")]),t._v(" "),r("li",[t._v("内置执行器, 无需next()")])]),t._v(" "),r("h3",{attrs:{id:"_12-算法和数据结构："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12-算法和数据结构："}},[t._v("#")]),t._v(" 12. 算法和数据结构：")]),t._v(" "),r("ul",[r("li",[t._v("算法：\n解决具体问题所需要的解决方法。执行效率最快的最优算法。时间复杂度。输入，输出，有穷性，确定性，可行性。冒泡排序，二叉树遍历，最长回文，二分查找，指针，链表等，堆栈，队列等。力扣，codewar，算法导论。")]),t._v(" "),r("li",[t._v("数据结构：\n逻辑结构：集合、线性、树形、图形结构\n物理结构：顺序、链式存储结构")])]),t._v(" "),r("h3",{attrs:{id:"_13-封装jsonp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_13-封装jsonp"}},[t._v("#")]),t._v(" 13. 封装JSONP")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-68b5f178736feab6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"jsonp"}})]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function jsonp ({url, param, callback}) {\n  return new Promise((resolve, reject) => {\n    var script = document.createElement('script')\n    window.callback = function (data) {\n      resolve(data)\n      document.body.removeChild('script')\n    }\n    var param = {...param, callback}\n    var arr = []\n    for (let key in param) {\n      arr.push(`${key}=${param[key]}`)\n    }\n    script.src = `${url}?${arr.join('&')}`\n    document.body.appendChild(script)\n  })\n}\n")])])]),r("h3",{attrs:{id:"_14-手动实现map-foreach以及filter也类似"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14-手动实现map-foreach以及filter也类似"}},[t._v("#")]),t._v(" 14. 手动实现map(forEach以及filter也类似)")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// for循环实现\nArray.prototype.myMap = function () {\n  var arr = this\n  var [fn, thisValue] = Array.prototype.slice.call(arguments)\n  var result = []\n  for (var i = 0; i < arr.length; i++) {\n    result.push(fn.call(thisValue, arr[i], i, arr))\n  }\n  return result\n}\nvar arr0 = [1, 2, 3]\nconsole.log(arr0.myMap(v => v + 1))\n\n// forEach实现(reduce类似)\nArray.prototype.myMap = function (fn, thisValue) {\n  var result = []\n  this.forEach((v, i, arr) => {\n    result.push(fn.call(thisValue, v, i, arr))\n  })\n  return result\n}\nvar arr0 = [1, 2, 3]\nconsole.log(arr0.myMap(v => v + 1))\n")])])]),r("h3",{attrs:{id:"_15-js实现checkbox全选以及反选"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_15-js实现checkbox全选以及反选"}},[t._v("#")]),t._v(" 15. js实现checkbox全选以及反选")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('<body>\n    <button id="other">反选</button>\n    <input type="checkbox" id="all" />全选\n    <input type="checkbox" class="check" />1\n    <input type="checkbox" class="check" />2\n    <input type="checkbox" class="check" />3\n    <script>\n      var checkbox = document.getElementsByClassName(\'check\')\n      var checkAll = document.getElementById(\'all\')\n      var checkOther = document.getElementById(\'other\')\n      checkAll.onclick = function() {\n        var flag = true\n        for (var i = 0; i < checkbox.length; i++) {\n          if (!checkbox[i].checked) flag = false\n        }\n        if (flag) {\n          for (var i = 0; i < checkbox.length; i++) {\n            checkbox[i].checked = false\n          }\n        } else {\n          for (var i = 0; i < checkbox.length; i++) {\n            checkbox[i].checked = true\n          }\n        }\n      }\n      checkOther.onclick = function() {\n        for (var i = 0; i < checkbox.length; i++) {\n          checkbox[i].checked = !checkbox[i].checked\n        }\n      }\n    <\/script>\n  </body>\n')])])]),r("h3",{attrs:{id:"_16-对原型链的理解？prototype上都有哪些属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_16-对原型链的理解？prototype上都有哪些属性"}},[t._v("#")]),t._v(" 16. "),r("a",{attrs:{href:"https://www.jianshu.com/p/17b2d4dd6867",target:"_blank",rel:"noopener noreferrer"}},[t._v("对原型链的理解"),r("OutboundLink")],1),t._v("？prototype上都有哪些属性")]),t._v(" "),r("ul",[r("li",[t._v("在js里，继承机制是原型继承。继承的起点是 对象的原型（Object prototype）。")]),t._v(" "),r("li",[t._v("一切皆为对象，只要是对象，就会有 proto 属性，该属性存储了指向其构造的指针。")]),t._v(" "),r("li",[t._v("Object prototype也是对象，其 proto 指向null。")]),t._v(" "),r("li",[t._v("对象分为两种：函数对象和普通对象，只有函数对象拥有『原型』对象（prototype）。")]),t._v(" "),r("li",[t._v("prototype的本质是普通对象。")]),t._v(" "),r("li",[t._v("Function prototype比较特殊，是没有prototype的函数对象。")]),t._v(" "),r("li",[t._v("new操作得到的对象是普通对象。")]),t._v(" "),r("li",[t._v("当调取一个对象的属性时，会先在本身查找，若无，就根据 proto 找到构造原型，若无，继续往上找。最后会到达顶层Object prototype，它的 proto 指向null，均无结果则返回undefined，结束。")]),t._v(" "),r("li",[t._v("由 proto 串起的路径就是『原型链』。")]),t._v(" "),r("li",[t._v("通过prototype可以给所有子类共享属性")]),t._v(" "),r("li",[t._v("函数（Function）才有prototype属性，对象（除Object）拥有__proto__")]),t._v(" "),r("li",[t._v("实例的__proto__等于构造函数的prototype")]),t._v(" "),r("li",[t._v("实例的constructor指向构造函数")])]),t._v(" "),r("h3",{attrs:{id:"_17-为什么使用继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_17-为什么使用继承"}},[t._v("#")]),t._v(" 17. 为什么使用继承")]),t._v(" "),r("p",[t._v("通常在一般的项目里不需要,因为应用简单,但你要用纯js做一些复杂的工具或框架系统就要用到了,比如webgis、或者js框架如jquery、ext什么的,不然一个几千行代码的框架不用继承得写几万行,甚至还无法维护")]),t._v(" "),r("h3",{attrs:{id:"_18-settimeout时间延迟为何不准"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_18-settimeout时间延迟为何不准"}},[t._v("#")]),t._v(" 18. setTimeout时间延迟为何不准")]),t._v(" "),r("p",[t._v("单线程, 先执行同步主线程, 再执行异步任务队列")]),t._v(" "),r("h3",{attrs:{id:"_19-事件循环述，宏任务和微任务有什么区别？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_19-事件循环述，宏任务和微任务有什么区别？"}},[t._v("#")]),t._v(" 19. "),r("a",{attrs:{href:"https://www.jianshu.com/p/03b89adb3ddd",target:"_blank",rel:"noopener noreferrer"}},[t._v("事件循环述，宏任务和微任务有什么区别？"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("先主线程后异步任务队列")]),t._v(" "),r("li",[t._v("先微任务再宏任务")])]),t._v(" "),r("h3",{attrs:{id:"_20-let-const-var作用域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_20-let-const-var作用域"}},[t._v("#")]),t._v(" 20. let const var作用域")]),t._v(" "),r("p",[t._v("块级作用域, 暂时性死区")]),t._v(" "),r("h3",{attrs:{id:"_21-节流和防抖"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_21-节流和防抖"}},[t._v("#")]),t._v(" 21. "),r("a",{attrs:{href:"https://www.cnblogs.com/walls/p/6399837.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("节流和防抖"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("函数节流是指一定时间内js方法只跑一次。比如人的眨眼睛，就是一定时间内眨一次。这是函数节流最形象的解释。")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('// 函数节流   滚动条滚动\nvar canRun = true;\ndocument.getElementById("throttle").onscroll = function(){\n    if(!canRun){\n        // 判断是否已空闲，如果在执行中，则直接return\n        return;\n    }\n\n    canRun = false;\n    setTimeout(function(){\n        console.log("函数节流");\n        canRun = true;\n    }, 300);\n};\n')])])]),r("ul",[r("li",[t._v("函数防抖是指频繁触发的情况下，只有足够的空闲时间，才执行代码一次。比如生活中的坐公交，就是一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有别人没刷卡了，司机才开车。")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('// 函数防抖\nvar timer = false;\ndocument.getElementById("debounce").onscroll = function(){\n    clearTimeout(timer); // 清除未执行的代码，重置回初始化状态\n\n    timer = setTimeout(function(){\n        console.log("函数防抖");\n    }, 300);\n};  \n')])])]),r("h3",{attrs:{id:"_22-实现一个sleep函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_22-实现一个sleep函数"}},[t._v("#")]),t._v(" 22. 实现一个sleep函数")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 这种实现方式是利用一个伪死循环阻塞主线程。因为JS是单线程的。所以通过这种方式可以实现真正意义上的sleep()。\nfunction sleep(delay) {\n  var start = (new Date()).getTime();\n  while ((new Date()).getTime() - start < delay) {\n    continue;\n  }\n}\n\nfunction test() {\n  console.log('111');\n  sleep(2000);\n  console.log('222');\n}\n\ntest()\n")])])]),r("h3",{attrs:{id:"_23-闭包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_23-闭包"}},[t._v("#")]),t._v(" 23. 闭包")]),t._v(" "),r("ul",[r("li",[t._v("概念: 内层函数能够访问外层函数作用域的变量")]),t._v(" "),r("li",[t._v("缺点: 引起内存泄漏（释放内存）")]),t._v(" "),r("li",[t._v("作用:\n"),r("ul",[r("li",[t._v("保护this指向")]),t._v(" "),r("li",[t._v("使用闭包修正打印值")]),t._v(" "),r("li",[t._v("实现柯里化")]),t._v(" "),r("li",[t._v("实现node commonJs 模块化, 实现私有变量")]),t._v(" "),r("li",[t._v("保持变量与函数活性, 可延迟回收和执行")])])])]),t._v(" "),r("h3",{attrs:{id:"_24-immutable-js"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_24-immutable-js"}},[t._v("#")]),t._v(" 24. "),r("a",{attrs:{href:"https://www.jianshu.com/p/0fa8c7456c15",target:"_blank",rel:"noopener noreferrer"}},[t._v("Immutable.js"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("Facebook出品, 倡导数据的不可变性, 用的最多就是List和Map.")]),t._v(" "),r("h3",{attrs:{id:"_25-js实现instanceof"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_25-js实现instanceof"}},[t._v("#")]),t._v(" 25. js实现instanceof")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 检测l的原型链（__proto__）上是否有r.prototype，若有返回true，否则false\nfunction myInstanceof (l, r) {\n  var R = r.prototype\n  while (l.__proto__) {\n    if (l.__proto__ === R) return true\n  }\n  return false\n}\n")])])]),r("h3",{attrs:{id:"_27-es6的模块引入和commonjs区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_27-es6的模块引入和commonjs区别"}},[t._v("#")]),t._v(" 27. "),r("a",{attrs:{href:"https://www.cnblogs.com/unclekeith/archive/2017/10/17/7679503.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6的模块引入和CommonJs区别"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"_28-严格模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_28-严格模式"}},[t._v("#")]),t._v(" 28. "),r("a",{attrs:{href:"https://www.jianshu.com/p/39e295f4526d",target:"_blank",rel:"noopener noreferrer"}},[t._v("严格模式"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 严格模式下, 隐式绑定丢失后this不会指向window, 而是指向undefined\n      'use strict'\n      var a = 2\n      var obj = {\n        a: 1,\n        b: function() {\n          // console.log(this.a)\n          console.log(this)\n        }\n      }\n      var c = obj.b\n      c() // undefined\n")])])]),r("h3",{attrs:{id:"_30-typescript缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_30-typescript缺点"}},[t._v("#")]),t._v(" 30. typescript缺点")]),t._v(" "),r("ul",[r("li",[t._v("并不是严格意义的js的超集, 与js不完全兼容, 会报错")]),t._v(" "),r("li",[t._v("更多的限制, 是一种桎梏")]),t._v(" "),r("li",[t._v("有些js第三方库没有dts, 有问题")])]),t._v(" "),r("h3",{attrs:{id:"_31-构造函数实现原理（new操作符做了什么）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_31-构造函数实现原理（new操作符做了什么）"}},[t._v("#")]),t._v(" 31. 构造函数实现原理（new操作符做了什么）")]),t._v(" "),r("ul",[r("li",[t._v("构造函数中没有显示的创建Object对象,  实际上后台自动创建了一个空对象")]),t._v(" "),r("li",[t._v("直接给this对象赋值属性和方法, this即指向创建的对象")]),t._v(" "),r("li",[t._v("没有return返回值, 后台自动返回了该对象")]),t._v(" "),r("li",[t._v("该对象继承构造函数的原型")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 模拟构造函数实现\nvar Book = function(name) {\n  this.name = name;\n};\n \n//正常用法\nvar java = new Book(‘Master Java’);\n        \n//使用代码模拟，在非IE浏览器中测试，IE浏览器不支持\nvar python = {};\npython.__proto__ = Book.prototype;\nBook.call(python, 'Master Python');\n")])])]),r("h3",{attrs:{id:"_32-for-in-和-for-of区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_32-for-in-和-for-of区别"}},[t._v("#")]),t._v(" 32. "),r("a",{attrs:{href:"https://www.jianshu.com/p/c43f418d6bf0",target:"_blank",rel:"noopener noreferrer"}},[t._v("for in 和 for of区别"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[r("code",[t._v("for in")]),t._v("遍历数组会遍历到数组原型上的属性和方法, 更适合遍历对象")]),t._v(" "),r("li",[r("code",[t._v("forEach")]),t._v("不支持"),r("code",[t._v("break, continue, return")]),t._v("等")]),t._v(" "),r("li",[t._v("使用"),r("code",[t._v("for of")]),t._v("可以成功遍历数组的值, 而不是索引, 不会遍历原型")]),t._v(" "),r("li",[t._v("for in 可以遍历到myObject的原型方法method,如果不想遍历原型方法和属性的话，可以在循环内部判断一下,hasOwnPropery方法可以判断某属性是否是该对象的实例属性")])]),t._v(" "),r("h3",{attrs:{id:"_33-js实现并发控制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_33-js实现并发控制"}},[t._v("#")]),t._v(" 33. JS实现并发控制:")]),t._v(" "),r("p",[t._v("使用消息队列以及"),r("code",[t._v("setInterval")]),t._v("或"),r("code",[t._v("promise")]),t._v("进行入队和出队")]),t._v(" "),r("h3",{attrs:{id:"_34-ajax和axios、fetch的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_34-ajax和axios、fetch的区别"}},[t._v("#")]),t._v(" 34. "),r("a",{attrs:{href:"https://www.jianshu.com/p/8bc48f8fde75",target:"_blank",rel:"noopener noreferrer"}},[t._v("ajax和axios、fetch的区别"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"_35-promise-finally实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_35-promise-finally实现"}},[t._v("#")]),t._v(" 35. promise.finally实现")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Promise.prototype.finally = function (callback) {\n  let P = this.constructor;\n  return this.then(\n    value  => P.resolve(callback()).then(() => value),\n    reason => P.resolve(callback()).then(() => { throw reason })\n  );\n};\n")])])]),r("h3",{attrs:{id:"_36-实现symbol"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_36-实现symbol"}},[t._v("#")]),t._v(" 36. "),r("a",{attrs:{href:"https://segmentfault.com/a/1190000015262174",target:"_blank",rel:"noopener noreferrer"}},[t._v("实现symbol"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("(function() {\n    var root = this;\n    var SymbolPolyfill = function Symbol(description) {\n        // Symbol函数前不能使用new命令\n        if (this instanceof SymbolPolyfill) throw new TypeError('Symbol is not a constructor')\n        // 参数是对象，则调用toString\n        var descString = description === undefined ? undefined : String(description)\n        var symbol = Object.create({\n            // 显示转为字符串\n            toString: function() {\n                return 'Symbol(' + this.description ')'\n            },\n            // 不能参与运算\n            valueOf: function() {\n                throw new Error('Cannot convert a Symbol value')\n            }\n        })\n        // 作为对象键名时，生成一个独一无二名称\n        // ES2019新增\n        symbol.prototype.description = descString\n        // 返回一个新对象 由于指针不同  所以两两不等\n        return symbol;\n    }\n    root.SymbolPolyfill = SymbolPolyfill;\n})();\n")])])]),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/28d85bebe599",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.create()创建对象"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"_37-es6装饰器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_37-es6装饰器"}},[t._v("#")]),t._v(" 37. ES6装饰器")]),t._v(" "),r("ul",[r("li",[t._v("提案经过大幅修改，没有定案，可能会变")]),t._v(" "),r("li",[t._v("是一种函数，用于改变类或方法的功能，起到注释作用")]),t._v(" "),r("li",[t._v("函数：")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("@decorator\nclass A {}\n\n// 等同于\n\nclass A {}\nA = decorator(A) || A;\n")])])]),r("ul",[r("li",[t._v("方法：")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function readonly(target, name, descriptor){\n  // descriptor对象原来的值如下\n  // {\n  //   value: specifiedFunction,\n  //   enumerable: false,\n  //   configurable: true,\n  //   writable: true\n  // };\n  descriptor.writable = false;\n  return descriptor;\n}\n\nreadonly(Person.prototype, 'name', descriptor);\n// 类似于\nObject.defineProperty(Person.prototype, 'name', descriptor);\n")])])]),r("ul",[r("li",[t._v("先从外到内进入，经过 reverse 倒序后，然后由内向外执行。")])]),t._v(" "),r("h3",{attrs:{id:"_38-实现fetch-abort"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_38-实现fetch-abort"}},[t._v("#")]),t._v(" 38. 实现fetch abort")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("const controller = new AbortController()\nsetTimeout(() => controller.abort(), 1000);\n\nfetch(url, {\n    signal: controller.signal\n}).then(res => {\n    ...   \n}, err => {\n    console.log(err) // AbortError\n})\n")])])]),r("h3",{attrs:{id:"_39-使用xhr实现fetch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_39-使用xhr实现fetch"}},[t._v("#")]),t._v(" 39. 使用xhr实现fetch")]),t._v(" "),r("ul",[r("li",[t._v("fetch是ajax替代品，基于promise。")]),t._v(" "),r("li",[t._v("类似于jquey ajax，但不是ajax封装，而是原生js,，没有使用XHR对象")]),t._v(" "),r("li",[t._v("比ajax方便，但仍然不完善，建议使用axios库")]),t._v(" "),r("li",[t._v("fetch有而axios没有的问题：\n"),r("ul",[r("li",[t._v("兼容性问题")]),t._v(" "),r("li",[t._v("默认不带cookie，需要手动设置credentials")]),t._v(" "),r("li",[t._v("跨域问题，需要手动设置mode")]),t._v(" "),r("li",[t._v("返回400、500不识别为reject")]),t._v(" "),r("li",[t._v("无法abort和timeout")])])]),t._v(" "),r("li",[t._v("用XHR实现fetch:")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 先实现ajax\nfunction ajax(method,url,data,suc,fail) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    xhr.onreadystatechange = function () {\n        if(xhr.readyState == 4){\n            if(xhr.status == 200){\n                suc(xhr.responseText)\n            } else {\n                console.log(err);\n                fail(xhr.responseText);\n            }\n        }\n    };\n    xhr.send(data);\n}\n\n// 再实现promise\nfunction promise () {\n  this.msg = '' // 存放value和error\n  this.status = 'pending'\n  var that = this\n  var process = arguments[0]\n\n  process (function () {\n    that.status = 'fulfilled'\n    that.msg = arguments[0]\n  }, function () {\n    that.status = 'rejected'\n    that.msg = arguments[0]\n  })\n  return this\n}\n\npromise.prototype.then = function () {\n  if (this.status === 'fulfilled') {\n    arguments[0](this.msg)\n  } else if (this.status === 'rejected' && arguments[1]) {\n    arguments[1](this.msg)\n  }\n}\n\n// 最后实现fetch\nfunction fetch(method, url, data) {\n    return new promise(function (resolve,reject) {\n        ajax(method, url, data, function (res) {\n            resolve(res);\n        },function (err) {\n            reject(err);\n        })\n    })\n}\n")])])]),r("h3",{attrs:{id:"_40-js中数值存储"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_40-js中数值存储"}},[t._v("#")]),t._v(" 40. JS中数值存储")]),t._v(" "),r("ul",[r("li",[t._v("javascript 中所有的数值类型都是双精度存储的，使用 "),r("strong",[t._v("64bit")]),t._v("，64bit 等于 "),r("strong",[t._v("8byte")])]),t._v(" "),r("li",[t._v("中文占2个字节（byte） 中文里标点也占2个字节（byte） 英文里的子母不分大小写，一个子母占1个字节（字节） 英文里的标点占1个字节。 1字节（byte）=8位（bits）")]),t._v(" "),r("li",[t._v("当任何数字在进行位运算时 js 内部会将其转换成32位有符号整型")])]),t._v(" "),r("h3",{attrs:{id:"_41-this指向："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_41-this指向："}},[t._v("#")]),t._v(" 41. "),r("a",{attrs:{href:"https://juejin.im/post/5c049e6de51d45471745eb98",target:"_blank",rel:"noopener noreferrer"}},[t._v("this指向"),r("OutboundLink")],1),t._v("：")]),t._v(" "),r("ul",[r("li",[t._v("谁调用了方法，该方法的this就指向谁;")]),t._v(" "),r("li",[t._v("优先级：箭头函数 > new绑定 > 显示绑定 > 隐式绑定")])]),t._v(" "),r("h2",{attrs:{id:"浏览器网络相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器网络相关"}},[t._v("#")]),t._v(" 浏览器网络相关")]),t._v(" "),r("h3",{attrs:{id:"_1-reflow-回流-和repaint-重绘-优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-reflow-回流-和repaint-重绘-优化"}},[t._v("#")]),t._v(" 1. "),r("a",{attrs:{href:"https://www.jianshu.com/p/40c6fc1d4800",target:"_blank",rel:"noopener noreferrer"}},[t._v("reflow(回流)和repaint(重绘)优化"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-332db8d0cb9a4c4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"render"}})]),t._v(" "),r("ul",[r("li",[t._v("浏览器渲染过程: DOM tree, CSS tree --\x3e Render tree --\x3e Paint")]),t._v(" "),r("li",[t._v("DOM tree根节点为html")]),t._v(" "),r("li",[t._v("渲染从浏览器左上角到右下角")]),t._v(" "),r("li",[t._v("第一次打开页面至少触发一次重绘和回流, 结构如宽高位置变化时, 触发"),r("strong",[t._v("reflow回流")]),t._v(";非结构如背景色变化时, 触发"),r("strong",[t._v("repaint重绘")]),t._v(". 二者都会造成体验不佳")]),t._v(" "),r("li",[t._v("如何减少重绘和回流?\n"),r("ul",[r("li",[t._v("通过classname或cssText一次性修改样式, 而非一个一个改")]),t._v(" "),r("li",[t._v("离线模式: 克隆要操作的结点, 操作后再与原始结点交换, 类似于虚拟DOM")]),t._v(" "),r("li",[t._v("避免频繁直接访问计算后的样式, 而是先将信息保存下来")]),t._v(" "),r("li",[t._v("绝对布局的DOM, 不会造成大量reflow")]),t._v(" "),r("li",[t._v("div不要嵌套太深, 不要超过六层")])])])]),t._v(" "),r("h3",{attrs:{id:"_2-一个页面从输入-url-到页面加载显示完成，这个过程中都发生了什么？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-一个页面从输入-url-到页面加载显示完成，这个过程中都发生了什么？"}},[t._v("#")]),t._v(" 2."),r("a",{attrs:{href:"https://www.cnblogs.com/gitbo/p/6597735.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；\n- 服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；")]),t._v(" "),r("li",[t._v("浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM Tree）；")]),t._v(" "),r("li",[t._v("载入解析到的资源文件，渲染页面，完成。")])]),t._v(" "),r("h3",{attrs:{id:"_3-localstorage-与-sessionstorage-与cookie的区别总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-localstorage-与-sessionstorage-与cookie的区别总结"}},[t._v("#")]),t._v(" 3.localStorage 与 sessionStorage 与cookie的区别总结")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("共同点")]),t._v(": 都保存在浏览器端, 且同源")]),t._v(" "),r("li",[t._v("localStorage 与 sessionStorage 统称webStorage,保存在浏览器,不参与服务器通信,大小为5M")]),t._v(" "),r("li",[r("strong",[t._v("生命周期不同")]),t._v(": localStorage永久保存, sessionStorage当前会话, 都可手动清除")]),t._v(" "),r("li",[r("strong",[t._v("作用域不同")]),t._v(": 不同浏览器不共享local和session, 不同会话不共享session")]),t._v(" "),r("li",[r("strong",[t._v("Cookie")]),t._v(": 设置的过期时间前一直有效, 大小4K.有个数限制, 各浏览器不同, 一般为20个.携带在HTTP头中, 过多会有性能问题.可自己封装, 也可用原生")])]),t._v(" "),r("h3",{attrs:{id:"_4-浏览器如何阻止事件传播，阻止默认行为"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器如何阻止事件传播，阻止默认行为"}},[t._v("#")]),t._v(" 4.浏览器如何阻止事件传播，阻止默认行为")]),t._v(" "),r("ul",[r("li",[t._v("阻止事件传播(冒泡): e.stopPropagation()")]),t._v(" "),r("li",[t._v("阻止默认行为: e.preventDefault()")])]),t._v(" "),r("h3",{attrs:{id:"_5-虚拟dom方案相对原生dom操作有什么优点，实现上是什么原理？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-虚拟dom方案相对原生dom操作有什么优点，实现上是什么原理？"}},[t._v("#")]),t._v(" 5.虚拟DOM方案相对原生DOM操作有什么优点，实现上是什么原理？")]),t._v(" "),r("p",[t._v("虚拟DOM可提升性能, 无须整体重新渲染, 而是局部刷新.\nJS对象, diff算法")]),t._v(" "),r("h3",{attrs:{id:"_6-浏览器事件机制中事件触发三个阶段"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-浏览器事件机制中事件触发三个阶段"}},[t._v("#")]),t._v(" 6.浏览器事件机制中事件触发三个阶段")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("事件捕获阶段")]),t._v(": 从dom树节点往下找到目标节点, 不会触发函数")]),t._v(" "),r("li",[r("strong",[t._v("事件目标处理函数")]),t._v(": 到达目标节点")]),t._v(" "),r("li",[r("strong",[t._v("事件冒泡")]),t._v(": 最后从目标节点往顶层元素传递, 通常函数在此阶段执行.\naddEventListener第三个参数默认false(冒泡阶段执行),true(捕获阶段执行).\n阻止冒泡见以上方法")])]),t._v(" "),r("h3",{attrs:{id:"_7-什么是跨域？为什么浏览器要使用同源策略？你有几种方式可以解决跨域问题？了解预检请求嘛？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-什么是跨域？为什么浏览器要使用同源策略？你有几种方式可以解决跨域问题？了解预检请求嘛？"}},[t._v("#")]),t._v(" 7."),r("a",{attrs:{href:"https://segmentfault.com/a/1190000011145364",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是跨域？为什么浏览器要使用同源策略？你有几种方式可以解决跨域问题？了解预检请求嘛？"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("跨域是指一个域下的文档或脚本试图去请求另一个域下的资源")]),t._v(" "),r("li",[t._v("防止XSS、CSFR等攻击, 协议+域名+端口不同")]),t._v(" "),r("li",[t._v("jsonp; 跨域资源共享（CORS）(Access control); 服务器正向代理等\n"),r("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-9505d1ec2550649f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"jsonp封装"}})]),t._v(" "),r("li",[r("strong",[t._v("预检请求")]),t._v(': 需预检的请求要求必须首先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。"预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响')])]),t._v(" "),r("h3",{attrs:{id:"_8-了解浏览器缓存机制吗？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-了解浏览器缓存机制吗？"}},[t._v("#")]),t._v(" 8."),r("a",{attrs:{href:"https://www.jianshu.com/p/8b4f3f7bf823",target:"_blank",rel:"noopener noreferrer"}},[t._v("了解浏览器缓存机制吗？"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("浏览器缓存就是把一个已经请求过的资源拷贝一份存储起来，当下次需要该资源时，浏览器会根据缓存机制决定直接使用缓存资源还是再次向服务器发送请求.")]),t._v(" "),r("li",[t._v("作用: 减少网络传输的损耗以及降低服务器压力。")]),t._v(" "),r("li",[t._v("缓存位置优先级：Service Worker > Memory Cache > Disk Cache > Push Cache. 都没有命中，就会向服务器发请求")]),t._v(" "),r("li",[t._v("策略优先级: 强制缓存 > 协商缓存; cache-control > Expires > Etag > Last-modified")])]),t._v(" "),r("h3",{attrs:{id:"_9-为什么操作-dom-慢"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-为什么操作-dom-慢"}},[t._v("#")]),t._v(" 9.为什么操作 DOM 慢?")]),t._v(" "),r("p",[t._v("DOM本身是一个js对象, 操作这个对象本身不慢, 但是操作后触发了浏览器的行为, 如repaint和reflow等浏览器行为, 使其变慢")]),t._v(" "),r("h3",{attrs:{id:"_10-什么情况会阻塞渲染？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-什么情况会阻塞渲染？"}},[t._v("#")]),t._v(" 10.什么情况会阻塞渲染？")]),t._v(" "),r("ul",[r("li",[t._v("js脚本同步执行")]),t._v(" "),r("li",[t._v("css和图片虽然是异步加载, 但js文件执行需依赖css, 所以css也会阻塞渲染")])]),t._v(" "),r("h3",{attrs:{id:"_11-如何判断js运行在浏览器中还是node中？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-如何判断js运行在浏览器中还是node中？"}},[t._v("#")]),t._v(" 11.如何判断js运行在浏览器中还是node中？")]),t._v(" "),r("p",[t._v("判断有无全局对象global和window")]),t._v(" "),r("h3",{attrs:{id:"_12-关于web以及浏览器处理预加载有哪些思考？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12-关于web以及浏览器处理预加载有哪些思考？"}},[t._v("#")]),t._v(" 12.关于web以及浏览器处理预加载有哪些思考？")]),t._v(" "),r("p",[t._v("图片等静态资源在使用之前就提前请求\n资源使用到的时候能从缓存中加载, 提升用户体验\n页面展示的依赖关系维护")]),t._v(" "),r("h3",{attrs:{id:"_13-http多路复用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_13-http多路复用"}},[t._v("#")]),t._v(" 13."),r("a",{attrs:{href:"https://segmentfault.com/a/1190000011172823",target:"_blank",rel:"noopener noreferrer"}},[t._v("http多路复用"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Keep-Alive")]),t._v(": Keep-Alive解决的核心问题：一定时间内，同一域名多次请求数据，只建立一次HTTP请求，其他请求可复用每一次建立的连接通道，以达到提高请求效率的问题。这里面所说的一定时间是可以配置的，不管你用的是Apache还是nginx。")]),t._v(" "),r("li",[t._v("解决两个问题: 串行文件传输(采用二进制数据帧); 连接数过多(采用流, 并行传输)")])]),t._v(" "),r("h3",{attrs:{id:"_14-http和https："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14-http和https："}},[t._v("#")]),t._v(" 14. "),r("a",{attrs:{href:"https://www.cnblogs.com/wqhwe/p/5407468.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http和https："),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("http: 最广泛网络协议，BS模型，浏览器高效。")]),t._v(" "),r("li",[t._v("https: 安全版，通过SSL加密，加密传输，身份认证，密钥")])]),t._v(" "),r("ol",[r("li",[t._v("https相对于http加入了ssl层, 加密传输, 身份认证;")]),t._v(" "),r("li",[t._v("需要到ca申请收费的证书;")]),t._v(" "),r("li",[t._v("安全但是耗时多，缓存不是很好;")]),t._v(" "),r("li",[t._v("注意兼容http和https;")]),t._v(" "),r("li",[t._v("连接方式不同, 端口号也不同, http是80, https是443")])]),t._v(" "),r("h3",{attrs:{id:"_15-csrf和xss区别及防御"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_15-csrf和xss区别及防御"}},[t._v("#")]),t._v(" 15.  "),r("a",{attrs:{href:"https://blog.csdn.net/m0_37631322/article/details/81346335",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSRF和XSS区别及防御"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"_16-cookie可设置哪些属性？httponly"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_16-cookie可设置哪些属性？httponly"}},[t._v("#")]),t._v(" 16. cookie可设置哪些属性？httponly?")]),t._v(" "),r("p",[t._v("chrome控制台的application下可查看:\n"),r("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-01018453748f43b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"cookie"}})]),t._v(" "),r("ul",[r("li",[t._v("name　　字段为一个cookie的名称。")]),t._v(" "),r("li",[t._v("value　　字段为一个cookie的值。")]),t._v(" "),r("li",[t._v("domain　　字段为可以访问此cookie的域名。")]),t._v(" "),r("li",[t._v("path　　字段为可以访问此cookie的页面路径。 比如domain是abc.com,path是/test，那么只有/test路径下的页面可以读取此cookie。")]),t._v(" "),r("li",[t._v("expires/Max-Age 　　字段为此cookie超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。")]),t._v(" "),r("li",[t._v("Size　　字段 此cookie大小。")]),t._v(" "),r("li",[t._v("http　　字段  cookie的httponly属性。若此属性为true，则只有在http请求头中会带有此cookie的信息，而不能通过document.cookie来访问此cookie。")]),t._v(" "),r("li",[t._v("secure　　 字段 设置是否只能通过https来传递此条cookie")])]),t._v(" "),r("h3",{attrs:{id:"_17-登录后，前端做了哪些工作，如何得知已登录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_17-登录后，前端做了哪些工作，如何得知已登录"}},[t._v("#")]),t._v(" 17. 登录后，前端做了哪些工作，如何得知已登录")]),t._v(" "),r("ul",[r("li",[t._v("前端存放服务端下发的cookie, 简单说就是写一个字段在cookie中表明已登录, 并设置失效日期")]),t._v(" "),r("li",[t._v("或使用后端返回的token, 每次ajax请求将token携带在请求头中, 这也是防范csrf的手段之一")])]),t._v(" "),r("h3",{attrs:{id:"_18-http状态码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_18-http状态码"}},[t._v("#")]),t._v(" 18. "),r("a",{attrs:{href:"https://www.runoob.com/http/http-status-codes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http状态码"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("1**: 服务器收到请求, 需请求者进一步操作")]),t._v(" "),r("li",[t._v("2**: 请求成功")]),t._v(" "),r("li",[t._v("3**: 重定向, 资源被转移到其他URL了")]),t._v(" "),r("li",[t._v("4**: 客户端错误, 请求语法错误或没有找到相应资源")]),t._v(" "),r("li",[t._v("5**: 服务端错误, server error")]),t._v(" "),r("li",[t._v("301: 资源(网页等)被永久转移到其他URL, 返回值中包含新的URL, 浏览器会自动定向到新URL")]),t._v(" "),r("li",[t._v("302: 临时转移. 客户端应访问原有URL")]),t._v(" "),r("li",[t._v("304: Not Modified. 指定日期后未修改, 不返回资源")]),t._v(" "),r("li",[t._v("403: 服务器拒绝执行请求")]),t._v(" "),r("li",[t._v("404: 请求的资源(网页等)不存在")]),t._v(" "),r("li",[t._v("500: 内部服务器错误")])]),t._v(" "),r("h3",{attrs:{id:"_19-http请求头缓存设置方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_19-http请求头缓存设置方法"}},[t._v("#")]),t._v(" 19.  "),r("a",{attrs:{href:"https://www.cnblogs.com/zhaow/p/7832829.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Http请求头缓存设置方法"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("Cache-control, expire, last-modify")]),t._v(" "),r("h3",{attrs:{id:"_20-实现页面回退刷新"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_20-实现页面回退刷新"}},[t._v("#")]),t._v(" 20. 实现页面回退刷新")]),t._v(" "),r("ul",[r("li",[t._v("旧: window.history.back() + window.location.href=document.referrer;")]),t._v(" "),r("li",[t._v("新: HTML5的新API扩展了window.history，使历史记录点更加开放了。可以存储当前历史记录点、替换当前历史记录点、监听历史记录点onpopstate, replaceState")])]),t._v(" "),r("h3",{attrs:{id:"_21-正向代理和反向代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_21-正向代理和反向代理"}},[t._v("#")]),t._v(" 21. "),r("a",{attrs:{href:"https://www.cnblogs.com/Anker/p/6056540.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("正向代理和反向代理"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("正向代理:\n"),r("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-b63e408b48418647.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"正向代理"}}),t._v("\n（1）访问原来无法访问的资源，如google\n（2） 可以做缓存，加速访问资源\n（3）对客户端访问授权，上网进行认证\n（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息")]),t._v(" "),r("li",[t._v("反向代理: "),r("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-78b27e56002ff0ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"反向代理"}}),t._v("\n（1）保证内网的安全，可以使用反向代理提供WAF功能，阻止web攻击大型网站，通常将反向代理作为公网访问地址，Web服务器是内网。\n（2）负载均衡，通过反向代理服务器来优化网站的负载")])]),t._v(" "),r("h3",{attrs:{id:"_22-关于预检请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_22-关于预检请求"}},[t._v("#")]),t._v(" 22. "),r("a",{attrs:{href:"https://www.jianshu.com/p/3a10ac906fd0",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于预检请求"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("在非简单请求且跨域的情况下，浏览器会自动发起options预检请求。")]),t._v(" "),r("h3",{attrs:{id:"_23-三次握手四次挥手"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_23-三次握手四次挥手"}},[t._v("#")]),t._v(" 23. "),r("a",{attrs:{href:"https://www.jianshu.com/p/ad0904df7d76",target:"_blank",rel:"noopener noreferrer"}},[t._v("三次握手四次挥手"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("开启连接用三次握手, 关闭用四次挥手")])]),t._v(" "),r("h3",{attrs:{id:"_24-tcp和udp协议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_24-tcp和udp协议"}},[t._v("#")]),t._v(" 24. TCP和UDP协议")]),t._v(" "),r("ul",[r("li",[t._v("TCP（Transmission Control Protocol：传输控制协议；面向连接，可靠传输")]),t._v(" "),r("li",[t._v("UDP（User Datagram Protocol）：用户数据报协议；面向无连接，不可靠传输")])]),t._v(" "),r("h3",{attrs:{id:"_25-进程和线程的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_25-进程和线程的区别"}},[t._v("#")]),t._v(" 25. "),r("a",{attrs:{href:"https://www.cnblogs.com/zhuzhu2016/p/5804875.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("进程和线程的区别"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("进程：是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。")]),t._v(" "),r("li",[t._v("线程：是进程的一个执行单元，是进程内科调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。")]),t._v(" "),r("li",[t._v("一个程序至少一个进程，一个进程至少一个线程。")])]),t._v(" "),r("h2",{attrs:{id:"vue相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue相关"}},[t._v("#")]),t._v(" vue相关")]),t._v(" "),r("h3",{attrs:{id:"_1-生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-生命周期"}},[t._v("#")]),t._v(" 1."),r("a",{attrs:{href:"http://baijiahao.baidu.com/s?id=1603406094025961442&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 生命周期"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-9983f5ab8e2b6fb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"生命周期"}})]),t._v(" "),r("h3",{attrs:{id:"_2-双向数据绑定v-model。这个最好也是自己实现一下-理解更深"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-双向数据绑定v-model。这个最好也是自己实现一下-理解更深"}},[t._v("#")]),t._v(" 2 .双向数据绑定v-model。这个最好也是自己实现一下 理解更深")]),t._v(" "),r("p",[t._v("通过v-model\nVUE实现双向数据绑定的原理就是利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 依赖收集\n// 简化版\nvar obj = { }\nvar name \n//第一个参数：定义属性的对象。\n//第二个参数：要定义或修改的属性的名称。\n//第三个参数：将被定义或修改的属性描述符。\nObject.defineProperty(obj, \"data\", {\n  //获取值\n  get: function () {\n    return name\n  },\n  //设置值\n  set: function (val) {\n    name = val\n    console.log(val)\n  }\n})\n//赋值调用set\nobj.data = 'aaa'\n//取值调用get\nconsole.log(obj.data)\n\n// 详细版\n myVue.prototype._obverse = function (obj) { // obj = {number: 0}\n    var value;\n    for (key in obj) {  //遍历obj对象\n      if (obj.hasOwnProperty(key)) {\n        value = obj[key]; \n        if (typeof value === 'object') {  //如果值是对象，则递归处理\n          this._obverse(value);\n        }\n        Object.defineProperty(this.$data, key, {  //关键\n          enumerable: true,\n          configurable: true,\n          get: function () {\n            console.log(`获取${value}`);\n            return value;\n          },\n          set: function (newVal) {\n            console.log(`更新${newVal}`);\n            if (value !== newVal) {\n              value = newVal;\n            }\n          }\n        })\n      }\n    }\n  }\n")])])]),r("h3",{attrs:{id:"_3-vue父子组件传递参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue父子组件传递参数"}},[t._v("#")]),t._v(" 3.vue父子组件传递参数")]),t._v(" "),r("ul",[r("li",[t._v("父 --\x3e子: 通过props")]),t._v(" "),r("li",[t._v("子 --\x3e父: 通过 $$refs 或 $emit")])]),t._v(" "),r("h3",{attrs:{id:"_4-vue传递参数方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue传递参数方法"}},[t._v("#")]),t._v(" 4."),r("a",{attrs:{href:"https://www.imooc.com/article/257885",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue传递参数方法"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("父子组件传参如上, v-bind :    v-on @")]),t._v(" "),r("li",[t._v("兄弟组件传参:(通过EventBus事件总线实现)")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 1. 新建eventBus.js\nimport Vue from 'vue'\nexport default new Vue\n// 或直接在main.js中初始化EventBus(全局)\nVue.prototype.$EventBus = new Vue()\n\n// 2. 发射与接收\n// 如果是定义在eventBus.js中\nimport eventBus from 'eventBus.js'\neventBus.$emit()\neventBus.$on()\n\n// 如果是定义在main.js中\nthis.bus.$emit()\nthis.bus.$on()\n\n// 3. 移除监听\neventBus.$off()\n")])])]),r("h3",{attrs:{id:"_5-vue自定义组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-vue自定义组件"}},[t._v("#")]),t._v(" 5.vue自定义组件")]),t._v(" "),r("p",[t._v("可以使用独立可复用的自定义组件来构成大型应用, 采用帕斯卡命名法或横线连接, 通过以上方式进行组件间通信. 每一个组件都是Vue实例, 可以使用生命周期钩子.")]),t._v(" "),r("h3",{attrs:{id:"_6-vue自定义指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue自定义指令"}},[t._v("#")]),t._v(" 6. "),r("a",{attrs:{href:"http://baijiahao.baidu.com/s?id=1603883371090691442&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue自定义指令"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("除核心指令之外的指令, 使用directive进行注册.")]),t._v(" "),r("li",[t._v("指令自定义钩子函数: bind, inserted, update, componentUpdated, unbind")])]),t._v(" "),r("h3",{attrs:{id:"_7-vuex组成和原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-vuex组成和原理"}},[t._v("#")]),t._v(" 7."),r("a",{attrs:{href:"https://baijiahao.baidu.com/s?id=1618794879569468435&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"}},[t._v("vuex组成和原理"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("组成: 组件间通信, 通过store实现全局存取")]),t._v(" "),r("li",[t._v("修改: 唯一途径, 通过commit一个mutations(同步)或dispatch一个actions(异步)")]),t._v(" "),r("li",[t._v("简写: 引入mapState、mapGetters、mapActions")])]),t._v(" "),r("h3",{attrs:{id:"_8-vue-router的原理，例如hashhistory和history-interface这些东西要弄明白。其实看一下源码就好了，看不懂可以直接看解析的相关技术博客。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-vue-router的原理，例如hashhistory和history-interface这些东西要弄明白。其实看一下源码就好了，看不懂可以直接看解析的相关技术博客。"}},[t._v("#")]),t._v(" 8.vue-router的原理，例如hashhistory和History interface这些东西要弄明白。其实看一下源码就好了，看不懂可以直接看解析的相关技术博客。")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.jianshu.com/p/e8b2529e472c",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-router用法"),r("OutboundLink")],1),t._v(":\n在router.js或者某一个路由分发页面配置path, name, component对应关系\n"),r("ul",[r("li",[t._v("每个按钮一个value, 在watch功能中使用this.$router.push实现对应跳转, 类似react的this.history.push")]),t._v(" "),r("li",[t._v("或直接用router-link to去跳转, 类似react的link to")])])]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.jianshu.com/p/4295aec31302",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-router原理"),r("OutboundLink")],1),t._v(": 通过"),r("strong",[t._v("hash")]),t._v("和"),r("strong",[t._v("History interface")]),t._v("两种方式实现前端路由\n"),r("ul",[r("li",[t._v("HashHistory: 利用URL中的hash（“#”）;replace()方法与push()方法不同之处在于，它并不是将新路由添加到浏览器访问历史的栈顶，而是替换掉当前的路由")]),t._v(" "),r("li",[t._v("History interface: 是浏览器历史记录栈提供的接口，通过back(), forward(), go()等方法，我们可以读取浏览器历史记录栈的信息，进行各种跳转操作. pushState(), replaceState() 这下不仅是读取了，还可以对浏览器历史记录栈进行修改")])])])]),t._v(" "),r("h3",{attrs:{id:"_9-vue的seo问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-vue的seo问题"}},[t._v("#")]),t._v(" 9.vue的seo问题")]),t._v(" "),r("p",[t._v("seo关系到网站排名, vue搭建spa做前后端分离不好做seo, 可通过其他方法解决:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://ssr.vuejs.org/zh/#%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%B8%B2%E6%9F%93-ssr-%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSR服务端渲染"),r("OutboundLink")],1),t._v(": 将同一个组件渲染为服务器端的 HTML 字符串.利于seo且更快.")]),t._v(" "),r("li",[t._v("vue-meta-info, nuxt, prerender-spa-plugin页面预渲染等")])]),t._v(" "),r("h3",{attrs:{id:"_10-预渲染和ssr"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-预渲染和ssr"}},[t._v("#")]),t._v(" 10.预渲染和ssr")]),t._v(" "),r("p",[t._v("以上")]),t._v(" "),r("h3",{attrs:{id:"_11-生命周期内create和mounted的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-生命周期内create和mounted的区别"}},[t._v("#")]),t._v(" 11.生命周期内create和mounted的区别")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("created")]),t._v(": 在模板渲染成html前调用，即通常初始化某些数据，然后再渲染成视图。")]),t._v(" "),r("li",[r("strong",[t._v("mounted")]),t._v(": 在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作和方法。")])]),t._v(" "),r("h3",{attrs:{id:"_12-监听watch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12-监听watch"}},[t._v("#")]),t._v(" 12.监听watch")]),t._v(" "),r("p",[t._v("对应一个对象，键是观察表达式，值是对应回调。值也可以是methods的方法名，或者是对象，包含选项。在实例化时为每个键调用 $watch()")]),t._v(" "),r("h3",{attrs:{id:"_13-登录验证拦截-通过router"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_13-登录验证拦截-通过router"}},[t._v("#")]),t._v(" 13.登录验证拦截(通过router)")]),t._v(" "),r("ul",[r("li",[t._v("先设置requireAuth:")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("routes = [\n    {\n        name: 'detail',\n        path: '/detail',\n        meta: {\n            requireAuth: true\n        }\n    },\n    {\n        name: 'login',\n        path: '/login'\n    }\n]\n")])])]),r("ul",[r("li",[t._v("再配置router.beforeEach:")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("router.beforeEach((from, to, next) => {\n    if (to.meta.requireAuth) { // 判断跳转的路由是否需要登录\n        if (store.state.token) { // vuex.state判断token是否存在\n            next() // 已登录\n        } else {\n            next({\n                path: '/login',\n                query: {redirect: to.fullPath} // 将跳转的路由path作为参数，登录成功后跳转到该路由\n            })\n        }\n    } else {\n       next()\n    }\n})\n")])])]),r("h3",{attrs:{id:"_14-v-for-key值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14-v-for-key值"}},[t._v("#")]),t._v(" 14. v-for key值")]),t._v(" "),r("p",[t._v("不写key值会报warning, 和react的array渲染类似. 根据diff算法, 修改数组后, 写key值会复用, 不写会重新生成, 造成性能浪费或某些不必要的错误")]),t._v(" "),r("h3",{attrs:{id:"_15-vue3-0的更新和defineproperty优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_15-vue3-0的更新和defineproperty优化"}},[t._v("#")]),t._v(" 15. "),r("a",{attrs:{href:"https://www.oschina.net/news/101906/vue-3-0-updates?from=singlemessage",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue3.0的更新和defineProperty优化"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("放弃 Object.defineProperty ，使用更快的原生 Proxy (访问对象拦截器, 也称代理器)")]),t._v(" "),r("li",[t._v("提速, 降低内存使用, Tree-shaking更友好")]),t._v(" "),r("li",[t._v("支持IE11等")]),t._v(" "),r("li",[t._v("使用Typescript")])]),t._v(" "),r("h3",{attrs:{id:"_15-vue使用this获取变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_15-vue使用this获取变量"}},[t._v("#")]),t._v(" 15. vue使用this获取变量")]),t._v(" "),r("p",[t._v("正常要通过vm.$options.data访问，但实例vm会遍历data中的变量，并挂在到this上， this.$root传参取值")]),t._v(" "),r("h3",{attrs:{id:"_16-jquery的优缺点，与vue的不同，vue的优缺点？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_16-jquery的优缺点，与vue的不同，vue的优缺点？"}},[t._v("#")]),t._v(" 16.  "),r("a",{attrs:{href:"https://www.jianshu.com/p/131c0d04dc1b",target:"_blank",rel:"noopener noreferrer"}},[t._v("jQuery的优缺点，与vue的不同，vue的优缺点？"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("jq优点: 比原生js更易书写, 封装了很多api, 有丰富的插件库; 缺点: 每次升级与之前版本不兼容, 只能手动开发, 操作DOM很慢, 不方便, 变量名污染, 作用域混淆等.")]),t._v(" "),r("li",[t._v("vue优缺点: 双向绑定, 虚拟DOM, diff算法, MVVM, 组件化, 通信方便, 路由分发等")])]),t._v(" "),r("h3",{attrs:{id:"_17-vue解除双向绑定"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_17-vue解除双向绑定"}},[t._v("#")]),t._v(" 17. vue解除双向绑定")]),t._v(" "),r("p",[r("code",[t._v("let obj = JSON.parse(JSON.stringify(this.temp1));")])]),t._v(" "),r("h3",{attrs:{id:"_18-vue异步组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_18-vue异步组件"}},[t._v("#")]),t._v(" 18. vue异步组件")]),t._v(" "),r("p",[t._v("为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Vue.component(\n  'async-webpack-example',\n  // 这个 `import` 函数会返回一个 `Promise` 对象。\n  () => import('./my-async-component')\n)\n")])])]),r("h3",{attrs:{id:"_19-mvc与mvvm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_19-mvc与mvvm"}},[t._v("#")]),t._v(" 19. "),r("a",{attrs:{href:"http://baijiahao.baidu.com/s?id=1596277899370862119&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"}},[t._v("MVC与MVVM"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("model-数据层 view-视图层 controller-控制层")]),t._v(" "),r("li",[t._v("MVC的目的是实现M和V的分离，单向通信，必须通过C来承上启下")]),t._v(" "),r("li",[t._v("MVVM中通过VM（vue中的实例化对象）的发布者-订阅者模式实现双向绑定，数据绑定，dom事件监听")]),t._v(" "),r("li",[t._v("区别：MVC和MVVM的区别并不是VM完全取代了C，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。也就是说MVVM实现的是业务逻辑组件的重用")])]),t._v(" "),r("h3",{attrs:{id:"_20-vue渐进式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_20-vue渐进式"}},[t._v("#")]),t._v(" 20. vue渐进式")]),t._v(" "),r("p",[t._v("小到可以只使用核心功能，比如单文件组件作为一部分嵌入；大到使用整个工程，vue init webpack my-project来构建项目；VUE的核心库及其生态系统也可以满足你的各式需求（core+vuex+vue-route）")]),t._v(" "),r("h2",{attrs:{id:"react相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react相关"}},[t._v("#")]),t._v(" react相关")]),t._v(" "),r("h3",{attrs:{id:"_1-新旧生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-新旧生命周期"}},[t._v("#")]),t._v(" 1. "),r("a",{attrs:{href:"https://segmentfault.com/a/1190000016617400",target:"_blank",rel:"noopener noreferrer"}},[t._v("新旧生命周期"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("旧")]),t._v(": will, did; mount, update...")]),t._v(" "),r("li",[r("strong",[t._v("新")]),t._v(": 16版本之后:\n"),r("ul",[r("li",[r("code",[t._v("getDerivedStateFromProps")]),t._v(": 虚拟dom之后，实际dom挂载之前, 每次获取新的props或state之后, 返回新的state, 配合didUpdate可以替代willReceiveProps")]),t._v(" "),r("li",[r("code",[t._v("getSnapshotBeforeUpdate")]),t._v(": update发生的时候，组件更新前触发, 在render之后，在组件dom渲染之前；返回一个值，作为componentDidUpdate的第三个参数；配合componentDidUpdate, 可以覆盖componentWillUpdate的所有用法")]),t._v(" "),r("li",[r("code",[t._v("componentDidCatch")]),t._v(": 错误处理")])])]),t._v(" "),r("li",[r("strong",[t._v("对比")]),t._v(": 弃用了三个will, 新增两个get来代替will, 不能混用, 17版本会彻底删除. 新增错误处理")])]),t._v(" "),r("h3",{attrs:{id:"_2-react核心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-react核心"}},[t._v("#")]),t._v(" 2. react核心")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://www.cnblogs.com/mahmud/p/10099672.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("虚拟DOM, Diff算法, 遍历key值"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("react-dom: 提供了针对DOM的方法，比如：把创建的虚拟DOM，渲染到页面上 或 配合ref来操作DOM")]),t._v(" "),r("li",[t._v("react-router")])]),t._v(" "),r("h3",{attrs:{id:"_3-fiber核心-react-16"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-fiber核心-react-16"}},[t._v("#")]),t._v(" 3. fiber核心(react 16)")]),t._v(" "),r("ul",[r("li",[t._v("旧: 浏览器渲染引擎单线程, 计算DOM树时锁住整个线程, 所有行为同步发生, 有效率问题, 期间react会一直占用浏览器主线程，如果组件层级比较深，相应的堆栈也会很深，长时间占用浏览器主线程, 任何其他的操作（包括用户的点击，鼠标移动等操作）都无法执行")]),t._v(" "),r("li",[t._v("新: 重写底层算法逻辑, 引入fiber时间片, 异步渲染, react会在渲染一部分树后检查是否有更高优先级的任务需要处理(如用户操作或绘图), 处理完后再继续渲染, 并可以更新优先级, 以此管理渲染任务. 加入fiber的react将组件更新分为两个时期（phase 1 && phase 2），render前的生命周期为phase1，render后的生命周期为phase2, 1可以打断, 2不能打断一次性更新. 三个will生命周期可能会重复执行, 尽量避免使用")])]),t._v(" "),r("h3",{attrs:{id:"_4-渲染一个react"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-渲染一个react"}},[t._v("#")]),t._v(" 4. 渲染一个react")]),t._v(" "),r("ul",[r("li",[t._v("分为首次渲染和更新渲染")]),t._v(" "),r("li",[t._v("生命周期, 建立虚拟DOM, 进行diff算法")]),t._v(" "),r("li",[t._v("对比新旧DOM, 节点对比, 将算法复杂度从O(n^3)降低到O(n)")]),t._v(" "),r("li",[t._v("key值优化, 避免用index作为key值, 兄弟节点中唯一就行")])]),t._v(" "),r("h3",{attrs:{id:"_5-高阶组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-高阶组件"}},[t._v("#")]),t._v(" 5. 高阶组件")]),t._v(" "),r("p",[t._v("高阶组件就是一个函数，且该函数(wrapper)接受一个组件作为参数，并返回一个新的组件。\n高阶组件并不关心数据使用的方式和原因，而被包裹的组件也不关心数据来自何处.")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000004006185?_ea=457266",target:"_blank",rel:"noopener noreferrer"}},[t._v("react-dnd"),r("OutboundLink")],1),t._v(": 根组件, source, target等\n"),r("code",[t._v("export default DragSource(type, spec, collect)(MyComponent)")])]),t._v(" "),r("li",[t._v("重构代码库使用HOC提升开发效率")])]),t._v(" "),r("h3",{attrs:{id:"_6-hook-v16-7测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-hook-v16-7测试"}},[t._v("#")]),t._v(" 6. hook(v16.7测试)")]),t._v(" "),r("p",[t._v("在无状态组件(如函数式组件)中也能操作state以及其他react特性, 通过useState")]),t._v(" "),r("h3",{attrs:{id:"_7-redux和vuex以及dva："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-redux和vuex以及dva："}},[t._v("#")]),t._v(" 7. redux和vuex以及dva：")]),t._v(" "),r("ul",[r("li",[t._v("redux: 通过store存储，通过action唯一更改，reducer描述如何更改。dispatch一个action")]),t._v(" "),r("li",[t._v("dva: 基于redux，结合redux-saga等中间件进行封装")]),t._v(" "),r("li",[t._v("vuex：类似dva，集成化。action异步，mutation非异步")])]),t._v(" "),r("h3",{attrs:{id:"_8-react和vue的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-react和vue的区别"}},[t._v("#")]),t._v(" 8. "),r("a",{attrs:{href:"https://www.jianshu.com/p/b7cd52868e95?from=groupmessage",target:"_blank",rel:"noopener noreferrer"}},[t._v("react和vue的区别"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("数据是否可变")]),t._v(": react整体是函数式的思想，把组件设计成纯组件，状态和逻辑通过参数传入，所以在react中，是单向数据流，推崇结合immutable来实现数据不可变; vue的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立Watcher来监听，当属性变化的时候，响应式的更新对应的虚拟dom。总之，react的性能优化需要手动去做，而vue的性能优化是自动的，但是vue的响应式机制也有问题，就是当state特别多的时候，Watcher也会很多，会导致卡顿，所以大型应用（状态特别多的）一般用react，更加可控。")]),t._v(" "),r("li",[r("strong",[t._v("通过js来操作一切，还是用各自的处理方式")]),t._v(": react的思路是all in js，通过js来生成html，所以设计了jsx，还有通过js来操作css，社区的styled-component、jss等; vue是把html，css，js组合到一起，用各自的处理方式，vue有单文件组件，可以把html、css、js写到一个文件中，html提供了模板引擎来处理。")]),t._v(" "),r("li",[r("strong",[t._v("类式的组件写法，还是声明式的写法")]),t._v(": react是类式的写法，api很少; 而vue是声明式的写法，通过传入各种options，api和参数都很多。所以react结合typescript更容易一起写，vue稍微复杂。")]),t._v(" "),r("li",[r("strong",[t._v("扩展不同")]),t._v(": react可以通过高阶组件（Higher Order Components--HOC）来扩展，而vue需要通过mixins来扩展")]),t._v(" "),r("li",[r("strong",[t._v("什么功能内置，什么交给社区去做")]),t._v(": react做的事情很少，很多都交给社区去做，vue很多东西都是内置的，写起来确实方便一些，\n比如 redux的combineReducer就对应vuex的modules，\n比如reselect就对应vuex的getter和vue组件的computed，\nvuex的mutation是直接改变的原始数据，而redux的reducer是返回一个全新的state，所以redux结合immutable来优化性能，vue不需要。")])]),t._v(" "),r("h3",{attrs:{id:"_9-react单向数据流怎么理解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-react单向数据流怎么理解"}},[t._v("#")]),t._v(" 9. react单向数据流怎么理解")]),t._v(" "),r("p",[t._v("React是单向数据流，数据主要从父节点传递到子节点（通过props）。如果顶层（父级）的某个props改变了，React会重渲染所有的子节点。")]),t._v(" "),r("h3",{attrs:{id:"_10-react算法复杂度优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-react算法复杂度优化"}},[t._v("#")]),t._v(" 10. React算法复杂度优化")]),t._v(" "),r("p",[t._v("react树对比是按照层级去对比的， 他会给树编号0,1,2,3,4.... 然后相同的编号进行比较。 所以复杂度是n，这个好理解。")]),t._v(" "),r("p",[t._v("关键是传统diff的复杂度是怎么算的？ 传统的diff需要出了上面的比较之外，还需要跨级比较。 他会将两个树的节点，两两比较，这就有n^2的复杂度了。 然后还需要编辑树，编辑的树可能发生在任何节点，需要对树进行再一次遍历操作，因此复杂度为n。加起来就是n^3了。")]),t._v(" "),r("h3",{attrs:{id:"_11-react优点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-react优点"}},[t._v("#")]),t._v(" 11. React优点")]),t._v(" "),r("p",[t._v("声明式, 组件化, 一次学习, 随处编写. 灵活, 丰富, 轻巧, 高效")]),t._v(" "),r("h3",{attrs:{id:"_12-react事件机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12-react事件机制"}},[t._v("#")]),t._v(" 12. React事件机制")]),t._v(" "),r("ul",[r("li",[t._v("合成事件：\n"),r("ul",[r("li",[t._v("根据事件类型，采用不同的"),r("code",[t._v("SyntheticEvent")]),t._v("来构造不同的合成事件")]),t._v(" "),r("li",[r("code",[t._v("syntheticEvent")]),t._v(" 和原生浏览器事件一样拥有同样的接口，也支持事件冒泡机制。可以通过"),r("code",[t._v("stopPropgation")]),t._v("和"),r("code",[t._v("preventDefault")]),t._v("中断")]),t._v(" "),r("li",[t._v("如果需要访问原生事件对象，可以使用"),r("code",[t._v("nativeEvent")]),t._v("属性")])])]),t._v(" "),r("li",[t._v("实现机制：\n"),r("ul",[r("li",[t._v("react 的事件机制利用了事件委托机制")]),t._v(" "),r("li",[t._v("没有绑定在真实的dom节点上，而是把事件都绑定在结构的最外层document，统一由这个监听器分发")]),t._v(" "),r("li",[t._v("注册：组件挂载和更新时，将绑定事件分类放入"),r("code",[t._v("EventPluginHub")]),t._v("事件池")]),t._v(" "),r("li",[t._v("触发：根据事件产生的Event对象找到触发事件的组件，再通过组件标识和事件类型从事件池里找到对应的事件监听回调并执行")])])]),t._v(" "),r("li",[t._v("react中使用原生\n"),r("ul",[r("li",[t._v("在"),r("code",[t._v("didmount")]),t._v("中对真实dom进行原生绑定，在"),r("code",[t._v("unmount")]),t._v("解绑，防止内存泄漏")]),t._v(" "),r("li",[r("code",[t._v("syntheticEvent")]),t._v("的"),r("code",[t._v("stopPropgation")]),t._v("无法阻止原生事件的冒泡，但原生可以组织合成，所以尽量不要混用，除非使用e.target判断")])])]),t._v(" "),r("li",[t._v("异步回调使用"),r("code",[t._v("syntheticEvent")]),t._v("：\n"),r("ul",[r("li",[t._v("合成事件里，回调执行后会销毁事件对象")]),t._v(" "),r("li",[t._v("异步回调需使用"),r("code",[t._v("event.persist()")]),t._v("告诉react不要回收")])])]),t._v(" "),r("li",[t._v("与原生冒泡捕获对比：\n"),r("ul",[r("li",[t._v("原生的捕获机制并不常用，且具有 ie 的不兼容问题")]),t._v(" "),r("li",[t._v("react仅实现冒泡机制，无兼容问题，只有"),r("code",[t._v("document")]),t._v("节点上才有 DOM 事件也节约了内存")])])]),t._v(" "),r("li",[t._v("事件执行：\n"),r("ol",[r("li",[t._v("找到事件触发的"),r("code",[t._v("DOM")]),t._v("和"),r("code",[t._v("React Component")]),t._v("，调用"),r("code",[t._v("findParent")]),t._v("方法")]),t._v(" "),r("li",[t._v("遍历得到所有父组件，存在数组中")]),t._v(" "),r("li",[t._v("从该组件直到最后一个父组件，根据之前事件存储，用 React 事件名 + 组件 key，找到对应绑定回调方法")])])])]),t._v(" "),r("h2",{attrs:{id:"移动端相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#移动端相关"}},[t._v("#")]),t._v(" 移动端相关")]),t._v(" "),r("h3",{attrs:{id:"_1-移动端兼容适配"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-移动端兼容适配"}},[t._v("#")]),t._v(" 1. 移动端兼容适配")]),t._v(" "),r("ul",[r("li",[r("meta",{attrs:{name:"viewport",content:"width=device-width, initial-scale=1.0"}})]),t._v(" "),r("li",[t._v("rem, em, 百分比")]),t._v(" "),r("li",[t._v("框架的栅格布局")]),t._v(" "),r("li",[t._v("media query媒体查询")]),t._v(" "),r("li",[t._v("手淘团队的一套flexible.js, 自动判断dpr进行整个布局视口的放缩")])]),t._v(" "),r("h3",{attrs:{id:"_2-flexible如何实现自动判断dpr"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-flexible如何实现自动判断dpr"}},[t._v("#")]),t._v(" 2. flexible如何实现自动判断dpr")]),t._v(" "),r("p",[t._v("判断机型, 找出样本机型去适配. 比如iphone以6为样本, 宽度375px, dpr是2")]),t._v(" "),r("h3",{attrs:{id:"_3-为什么以iphone6为标准的设计稿的尺寸是以750px宽度来设计的呢？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么以iphone6为标准的设计稿的尺寸是以750px宽度来设计的呢？"}},[t._v("#")]),t._v(" 3. 为什么以iPhone6为标准的设计稿的尺寸是以750px宽度来设计的呢？")]),t._v(" "),r("p",[t._v("iPhone6的满屏宽度是375px，而iPhone6采用的视网膜屏的物理像素是满屏宽度的2倍，也就是dpr(设备像素比)为2, 并且设计师所用的PS设计软件分辨率和像素关系是1:1。所以为了做出的清晰的页面，设计师一般给出750px的设计图，我们再根据需求对元素的尺寸设计和压缩。")]),t._v(" "),r("h3",{attrs:{id:"_4-如何处理异形屏iphone-x"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何处理异形屏iphone-x"}},[t._v("#")]),t._v(" 4. 如何处理异形屏iphone X")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("safe area")]),t._v(": 默认放置在安全区域以避免遮挡, 但会压缩")]),t._v(" "),r("li",[t._v("在meta中添加"),r("code",[t._v("viewport-fit=cover")]),t._v(": 告诉浏览器要讲整个页面渲染到浏览器中，不管设备是圆角与否，这个时候会造成页面的元素被圆角遮挡")]),t._v(" "),r("li",[r("code",[t._v("padding: constant(env)")]),t._v(": 解决遮挡问题")])]),t._v(" "),r("h3",{attrs:{id:"_5-移动端首屏优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-移动端首屏优化"}},[t._v("#")]),t._v(" 5. 移动端首屏优化")]),t._v(" "),r("ul",[r("li",[t._v("采用服务器渲染ssr")]),t._v(" "),r("li",[t._v("按需加载配合"),r("a",{attrs:{href:"https://www.jb51.net/article/119160.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("webpack分块打包"),r("OutboundLink")],1),t._v(", 通过entry和commonChunkPlugin")]),t._v(" "),r("li",[t._v("很有必要将script标签➕异步")]),t._v(" "),r("li",[t._v("有轮播图 最好给个默认 另外要处理图片懒加载")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.jianshu.com/p/bd202dca29ad",target:"_blank",rel:"noopener noreferrer"}},[t._v("打包线上也要注意去掉map 文件"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("组件, 路由懒加载")]),t._v(" "),r("li",[t._v("webpack的一切配置 肯定是必须的")]),t._v(" "),r("li",[t._v("压缩图片 "),r("a",{attrs:{href:"https://tinypng.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://tinypng.com/"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("建议还是用webpack的图片压缩插件")]),t._v(" "),r("li",[t._v("骨架屏")]),t._v(" "),r("li",[t._v("Loading页面")])]),t._v(" "),r("h3",{attrs:{id:"_6-pwa全称progressive-web-app，即渐进式web应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-pwa全称progressive-web-app，即渐进式web应用"}},[t._v("#")]),t._v(" 6. "),r("a",{attrs:{href:"https://segmentfault.com/a/1190000012353473?utm_source=tag-newest",target:"_blank",rel:"noopener noreferrer"}},[t._v("PWA全称Progressive Web App，即渐进式WEB应用"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能\n解决了哪些问题？")]),t._v(" "),r("ul",[r("li",[t._v("可以添加至主屏幕，点击主屏幕图标可以实现启动动画以及隐藏地址栏")]),t._v(" "),r("li",[t._v("实现离线缓存功能，即使用户手机没有网络，依然可以使用一些离线功能")]),t._v(" "),r("li",[t._v("实现了消息推送\n它解决了上述提到的问题，这些特性将使得 Web 应用渐进式接近原生 App。")])]),t._v(" "),r("h3",{attrs:{id:"_7-离线包方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-离线包方案"}},[t._v("#")]),t._v(" 7. 离线包方案")]),t._v(" "),r("p",[t._v("现在 web 页面在移动端的地位越来越高，大部分主流 App 采用 native + webview 的 hybrid 模式，加载远程页面受限于网络，本地 webview 引擎，经常会出现渲染慢导致的白屏现象，体验很差，于是离线包方案应运而生。动态下载的离线包可以使得我们不需要走完整的 App 审核发布流程就完成了版本的更新")]),t._v(" "),r("h3",{attrs:{id:"_8-自适应和响应式布局的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-自适应和响应式布局的区别"}},[t._v("#")]),t._v(" 8. "),r("a",{attrs:{href:"https://baijiahao.baidu.com/s?id=1627060039271152391&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"}},[t._v("自适应和响应式布局的区别"),r("OutboundLink")],1)]),t._v(" "),r("ol",[r("li",[r("p",[t._v("自适应布局通过检测视口分辨率，来判断当前访问的设备是：pc端、平板、手机，从而请求服务层，返回不同的页面；响应式布局通过检测视口分辨率，针对不同客户端在客户端做代码处理，来展现不同的布局和内容。")])]),t._v(" "),r("li",[r("p",[t._v("自适应布局需要开发多套界面，而响应式布局只需要开发一套界面就可以了。")])]),t._v(" "),r("li",[r("p",[t._v("自适应对页面做的屏幕适配是在一定范围：比如pc端一般要大于1024像素，手机端要小于768像素。而响应式布局是一套页面全部适应。")])]),t._v(" "),r("li",[r("p",[t._v("自适应布局如果屏幕太小会发生内容过于拥挤。而响应式布局正是为了解决这个问题而衍生出的概念，它可以自动识别屏幕宽度并做出相应调整的网页设计。")])])]),t._v(" "),r("h2",{attrs:{id:"插件及工具相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#插件及工具相关"}},[t._v("#")]),t._v(" 插件及工具相关")]),t._v(" "),r("h3",{attrs:{id:"_1-babel和polyfill"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-babel和polyfill"}},[t._v("#")]),t._v(" 1. "),r("a",{attrs:{href:"http://www.cnblogs.com/zhansu/p/8305081.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("babel和polyfill"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[r("p",[r("code",[t._v("Babel")]),t._v(": Babel 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码。注意：Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("Polyfill")]),t._v(": Polyfill的准确意思为，用于实现浏览器并不支持的原生API的代码。")])])]),t._v(" "),r("h3",{attrs:{id:"_2-jpg-jpeg和png区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-jpg-jpeg和png区别"}},[t._v("#")]),t._v(" 2. jpg, jpeg和png区别")]),t._v(" "),r("ul",[r("li",[t._v("jpg是jpeg的缩写, 二者一致")]),t._v(" "),r("li",[t._v("PNG就是为取代GIF而生的, 无损压缩, 占用内存多")]),t._v(" "),r("li",[t._v("jpg牺牲图片质量, 有损, 占用内存小")]),t._v(" "),r("li",[t._v("PNG格式可编辑。如图片中有字体等，可利用PS再做更改。JPG格式不可编辑")])]),t._v(" "),r("h3",{attrs:{id:"_3-git-rebase和merge区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-git-rebase和merge区别"}},[t._v("#")]),t._v(" 3. "),r("a",{attrs:{href:"https://www.jianshu.com/p/4079284dd970",target:"_blank",rel:"noopener noreferrer"}},[t._v("git rebase和merge区别"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-10c938ef31a111d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"git rebase"}}),t._v(" "),r("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-d26dc5206211eef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"git merge"}})]),t._v(" "),r("h1",{attrs:{id:"前端性能优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前端性能优化"}},[t._v("#")]),t._v(" 前端性能优化")]),t._v(" "),r("ol",[r("li",[t._v("减少HTTP请求（合并css、js，雪碧图/base64图片）")]),t._v(" "),r("li",[t._v("压缩（css、js、图片皆可压缩,使用webpack uglify和 svg）")]),t._v(" "),r("li",[t._v("样式表放头部，脚本放底部")]),t._v(" "),r("li",[t._v("使用CDN（这部分，不少前端都不用考虑，负责发布的兄弟可能会负责搞好）")]),t._v(" "),r("li",[t._v("http缓存")]),t._v(" "),r("li",[t._v("bosify图片压缩: 根据具体情况修改图片后缀或格式  后端根据格式来判断存储原图还是缩略图")]),t._v(" "),r("li",[t._v("懒加载, 预加载")]),t._v(" "),r("li",[t._v("替代方案: 骨架屏, SSR")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000015883378?utm_source=tag-newest",target:"_blank",rel:"noopener noreferrer"}},[t._v("webpack优化"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"原生通信"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原生通信"}},[t._v("#")]),t._v(" 原生通信")]),t._v(" "),r("h3",{attrs:{id:"_1-jsbridge通信原理-有哪几种实现的方式？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-jsbridge通信原理-有哪几种实现的方式？"}},[t._v("#")]),t._v(" 1."),r("a",{attrs:{href:"https://blog.csdn.net/u014021258/article/details/81129702",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSBridge通信原理, 有哪几种实现的方式？"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("JsBridge给JavaScript提供了调用Native功能，Native也能够操控JavaScript。这样前端部分就可以方便使用地理位置、摄像头以及登录支付等Native能力啦。JSBridge构建 Native和非Native间消息通信的通道，而且是 双向通信的通道。")]),t._v(" "),r("ul",[r("li",[t._v("JS 向 Native 发送消息 : 调用相关功能、通知 Native 当前 JS 的相关状态等。")]),t._v(" "),r("li",[t._v("Native 向 JS 发送消息 : 回溯调用结果、消息推送、通知 JS 当前 Native 的状态等。")])]),t._v(" "),r("p",[t._v("2.实现一个简单的 JSBridge，设计思路？")]),t._v(" "),r("h2",{attrs:{id:"算法相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法相关"}},[t._v("#")]),t._v(" 算法相关")]),t._v(" "),r("h3",{attrs:{id:"_1-二分查找和冒泡排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-二分查找和冒泡排序"}},[t._v("#")]),t._v(" 1. "),r("a",{attrs:{href:"https://www.cnblogs.com/tine/p/5938844.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("二分查找和冒泡排序"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("二分查找: 递归(分左右, 传递start,end参数)和非递归(使用while(l < h))；要求有序数组")]),t._v(" "),r("li",[t._v("冒泡排序: 两个for循环")])]),t._v(" "),r("h3",{attrs:{id:"_2-快速排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-快速排序"}},[t._v("#")]),t._v(" 2. "),r("a",{attrs:{href:"https://www.jianshu.com/p/e394f7012d75",target:"_blank",rel:"noopener noreferrer"}},[t._v("快速排序"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function quickSort (arr) {\n  if (arr.length < 2) return arr\n  var middle = Math.floor(arr.length / 2)\n  var flag = arr.splice(middle, 1)[0]\n  var left = [],\n        right = []\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] < flag) {\n      left.push(arr[i])\n    } else {\n      right.push(arr[i])\n    }\n  }\n  return quickSort(left).concat([flag], quickSort(right))\n}\n")])])]),r("h3",{attrs:{id:"_3-最长公共子串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-最长公共子串"}},[t._v("#")]),t._v(" 3. 最长公共子串")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function findSubStr(str1, str2) {\n        if (str1.length > str2.length) {\n          [str1, str2] = [str2, str1]\n        }\n        var result = ''\n        var len = str1.length\n        for (var j = len; j > 0; j--) {\n          for (var i = 0; i < len - j; i++) {\n            result = str1.substr(i, j)\n            if (str2.includes(result)) return result\n          }\n        }\n      }\n      console.log(findSubStr('aabbcc11', 'ppooiiuubcc123'))\n")])])]),r("h3",{attrs:{id:"_4-最长公共子序列-lcs动态规划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-最长公共子序列-lcs动态规划"}},[t._v("#")]),t._v(" 4. "),r("a",{attrs:{href:"https://juejin.im/post/5b0c2583f265da08f50b4b33#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("最长公共子序列(LCS动态规划)"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000012864957",target:"_blank",rel:"noopener noreferrer"}},[t._v("另一篇"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('// dp[i][j] 计算去最大长度，记住口诀：相等左上角加一，不等取上或左最大值\nfunction LCS(str1, str2){\n        var rows =  str1.split("")\n        rows.unshift("")\n        var cols =  str2.split("")\n        cols.unshift("")\n        var m = rows.length \n        var n = cols.length \n        var dp = []\n        for(var i = 0; i < m; i++){ \n            dp[i] = []\n            for(var j = 0; j < n; j++){ \n                if(i === 0 || j === 0){\n                    dp[i][j] = 0\n                    continue\n                }\n              \n                if(rows[i] === cols[j]){ \n                    dp[i][j] = dp[i-1][j-1] + 1 //对角＋1\n                }else{\n                    dp[i][j] = Math.max( dp[i-1][j], dp[i][j-1]) //对左边，上边取最大\n                }\n            }\n            console.log(dp[i].join(""))//调试\n        } \n        return dp[i-1][j-1]\n    }\n//!!!如果它来自左上角加一，则是子序列，否则向左或上回退。\n//findValue过程，其实就是和 就是把T[i][j]的计算反过来。\n// 求最长子序列\nfunction findValue(input1,input2,n1,n2,T){\n\tvar i = n1-1,j=n2-1;\n\tvar result = [];//结果保存在数组中\n\tconsole.log(i);\n\tconsole.log(j);\n\twhile(i>0 && j>0){\n\t\tif(input1[i] == input2[j]){\n\t\t\tresult.unshift(input1[i]);\n\t\t\ti--;\n\t\t\tj--;\n\t\t}else{\n\t\t\t//向左或向上回退\n\t\t\tif(T[i-1][j]>T[i][j-1]){\n\t\t\t\t//向上回退\n\t\t\t\ti--;\n\t\t\t}else{\n\t\t\t\t//向左回退\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconsole.log(result);\n}\n')])])]),r("h3",{attrs:{id:"_5-数组去重，多种方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-数组去重，多种方法"}},[t._v("#")]),t._v(" 5. "),r("a",{attrs:{href:"https://www.cnblogs.com/guangyan/articles/6682686.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("数组去重，多种方法"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("双for循环, splice剔除并i--回退")]),t._v(" "),r("li",[t._v("indexOf等于index")]),t._v(" "),r("li",[t._v("filter indexOf === index")]),t._v(" "),r("li",[t._v("新数组indexOf === index")]),t._v(" "),r("li",[t._v("使用空对象等")])]),t._v(" "),r("h3",{attrs:{id:"_6-实现一个函数功能：sum-1-2-3-4-n-转化为-sum-1-2-3-4-…-n"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-实现一个函数功能：sum-1-2-3-4-n-转化为-sum-1-2-3-4-…-n"}},[t._v("#")]),t._v(" 6. 实现一个函数功能：sum(1,2,3,4..n)转化为 sum(1)(2)(3)(4)…(n)")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 使用柯里化 + 递归\nfunction curry ( fn ) {\n  var c = (...arg) => (fn.length === arg.length) ? \n          fn (...arg) : (...arg1) => c(...arg, ...arg1)\n  return c\n}\n")])])]),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/7fa99a4bee8b",target:"_blank",rel:"noopener noreferrer"}},[t._v("柯里化参考我的另一篇"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"_7-反转二叉树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-反转二叉树"}},[t._v("#")]),t._v(" 7. 反转二叉树")]),t._v(" "),r("p",[t._v("此题充满了嘲讽。。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("var invertTree = function (root) {\n  if (root !== null) {\n    [root.left, root.right] = [root.right, root.left]\n    invertTree(root.left)\n    invertTree(root.right)\n  }\n  return root\n}\n")])])]),r("h3",{attrs:{id:"_8-贪心算法解决背包问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-贪心算法解决背包问题"}},[t._v("#")]),t._v(" 8. 贪心算法解决背包问题")]),t._v(" "),r("p",[t._v("问题：给定背包容积，如何存放不同重量和价值物品，能获得最大价值？")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("var items = ['A','B','C','D'] // 物品编号\nvar values = [50,220,60,60] // 物品价值\nvar weights = [5,20,10,12] // 物品重量\nvar capacity = 32 // 背包容积\n\ngreedy(values, weights, capacity) // 320\n\nfunction greedy(values, weights, capacity) {\n        var result = 0\n        var rest = capacity\n        var sortArray = []\n        var num = 0\n        values.forEach((v, i) => {\n          sortArray.push({\n            value: v,\n            weight: weights[i],\n            ratio: v / weights[i]\n          })\n        })\n        // 按照性价比降序排序\n        sortArray.sort((a, b) => b.ratio - a.ratio)\n        sortArray.forEach((v, i) => {\n          num = parseInt(rest / v.weight)\n          rest -= num * v.weight\n          result += num * v.value\n        })\n        return result\n      }\n")])])]),r("h3",{attrs:{id:"_9-输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得他们的和正好是s，如果有多对数字的和等于s，输出两个数的乘积最小的。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得他们的和正好是s，如果有多对数字的和等于s，输出两个数的乘积最小的。"}},[t._v("#")]),t._v(" 9. 输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function FindNumbersWithSum(array, sum)\n{\n    var index = 0\n    for (var i = 0; i < array.length - 1 && array[i] < sum / 2; i++) {\n        for (var j = i + 1; j < array.length; j++) {\n            if (array[i] + array[j] === sum) return [array[i], array[j]]\n        }\n        //index = array.indexOf(sum - array[i], i + 1)\n       // if (index !== -1) {\n       //     return [array[i], array[index]]\n        //}\n    }\n    return []\n")])])]),r("h3",{attrs:{id:"_10-二叉树各种-层序-遍历"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-二叉树各种-层序-遍历"}},[t._v("#")]),t._v(" 10. "),r("a",{attrs:{href:"https://www.jianshu.com/p/3eee17f3c6f4",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树各种(层序)遍历"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/5e9ea25a1aae",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度广度遍历"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 根据前序和中序重建二叉树\n/* function TreeNode(x) {\n    this.val = x;\n    this.left = null;\n    this.right = null;\n} */\nfunction reConstructBinaryTree(pre, vin)\n{\n    var result = null\n    if (pre.length === 1) {\n        result = {\n            val: pre[0],\n            left: null,\n            right: null\n        }\n    } else if (pre.length > 1) {\n        var root = pre[0]\n        var vinRootIndex = vin.indexOf(root)\n        var vinLeft = vin.slice(0, vinRootIndex)\n        var vinRight = vin.slice(vinRootIndex + 1, vin.length)\n        pre.shift()\n        var preLeft = pre.slice(0, vinLeft.length)\n        var preRight = pre.slice(vinLeft.length, pre.length)\n        result = {\n            val: root,\n            left: reConstructBinaryTree(preLeft, vinLeft),\n            right: reConstructBinaryTree(preRight, vinRight)\n        }\n    }\n    return result\n}\n\n// 递归\n// 前序遍历\nfunction prevTraverse (node) {\n  if (node === null) return;\n\n  console.log(node.data);\n  prevTraverse(node.left);\n  prevTraverse(node.right);\n}\n\n// 中序遍历\nfunction middleTraverse (node) {\n  if (node === null) return;\n\n  middleTraverse(node.left);\n  console.log(node.data);\n  middleTraverse(node.right);\n}\n\n// 后序遍历\nfunction lastTraverse (node) {\n  if (node === null) return;\n\n  lastTraverse(node.left);\n  lastTraverse(node.right);\n  console.log(node.data);\n}\n\n// 非递归\n// 前序遍历\nfunction preTraverse(tree) {\n        var arr = [],\n          node = null\n        arr.unshift(tree)\n        while (arr.length) {\n          node = arr.shift()\n          console.log(node.root)\n          if (node.right) arr.unshift(node.right)\n          if (node.left) arr.unshift(node.left)\n        }\n      }\n\n// 中序遍历\nfunction middleTraverseUnRecursion (root) {\n  let arr = [],\n      node = root;\n\n  while (arr.length !== 0 || node !== null) {\n    if (node === null) {\n      node = arr.shift();\n      console.log(node.data);\n      node = node.right;\n    } else {\n      arr.unshift(node);\n      node = node.left;\n    }\n  }\n\n}\n\n// 广度优先-层序遍历\n// 递归\nvar result = []\nvar stack = [tree]\nvar count = 0\nvar bfs = function () {\n  var node = stack[count]\n  if (node) {\n    result.push(node.value)\n    if (node.left) stack.push(node.left)\n    if (node.right) stack.push(node.right)\n    count++\n    bfs()\n  }\n}\nbfs()\nconsole.log(result)\n// 非递归\nfunction bfs (node) {\n  var result = []\n  var queue = []\n  queue.push(node)\n  while (queue.length) {\n    node = queue.shift()\n    result.push(node.value)\n    node.left && queue.push(node.left)\n    node.right && queue.push(node.right)\n  }\n  return result\n}\n")])])]),r("h3",{attrs:{id:"_11-各种排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-各种排序"}},[t._v("#")]),t._v(" 11. "),r("a",{attrs:{href:"https://www.jianshu.com/p/7e6589306a27",target:"_blank",rel:"noopener noreferrer"}},[t._v("各种排序"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 插入排序\nfunction insertSort(arr) {\n        var temp\n        for (var i = 1; i < arr.length; i++) {\n          temp = arr[i]\n          for (var j = i; j > 0 && temp < arr[j - 1]; j--) {\n            arr[j] = arr[j - 1]\n          }\n          arr[j] = temp\n        }\n        return arr\n      }\n      console.log(insertSort([3, 1, 8, 2, 5]))\n\n// 归并排序\nfunction mergeSort(array) {\n        var result = array.slice(0)\n        function sort(array) {\n          var length = array.length\n          var mid = Math.floor(length * 0.5)\n          var left = array.slice(0, mid)\n          var right = array.slice(mid, length)\n          if (length === 1) return array\n          return merge(sort(left), sort(right))\n        }\n        function merge(left, right) {\n          var result = []\n\n          while (left.length || right.length) {\n            if (left.length && right.length) {\n              if (left[0] < right[0]) {\n                result.push(left.shift())\n              } else {\n                result.push(right.shift())\n              }\n            } else if (left.length) {\n              result.push(left.shift())\n            } else {\n              result.push(right.shift())\n            }\n          }\n          return result\n        }\n        return sort(result)\n      }\n      console.log(mergeSort([5, 2, 8, 3, 6]))\n\n// 二分插入排序\nfunction twoSort(array) {\n        var len = array.length,\n          i,\n          j,\n          tmp,\n          low,\n          high,\n          mid,\n          result\n        result = array.slice(0)\n        for (i = 1; i < len; i++) {\n          tmp = result[i]\n          low = 0\n          high = i - 1\n          while (low <= high) {\n            mid = parseInt((high + low) / 2, 10)\n            if (tmp < result[mid]) {\n              high = mid - 1\n            } else {\n              low = mid + 1\n            }\n          }\n          for (j = i - 1; j >= high + 1; j--) {\n            result[j + 1] = result[j]\n          }\n          result[j + 1] = tmp\n        }\n        return result\n      }\n      console.log(twoSort([4, 1, 7, 2, 5]))\n")])])]),r("h3",{attrs:{id:"_12-使用尾递归对斐波那契优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12-使用尾递归对斐波那契优化"}},[t._v("#")]),t._v(" 12. "),r("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用尾递归对斐波那契优化"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("// 传统递归斐波那契, 会造成超时或溢出\nfunction Fibonacci (n) {\n  if ( n <= 1 ) {return 1};\n\n  return Fibonacci(n - 1) + Fibonacci(n - 2);\n}\n\nFibonacci(10) // 89\nFibonacci(100) // 超时\nFibonacci(500) // 超时\n\n// 使用尾递归优化, 可规避风险\nfunction Fibonacci2 (n , ac1 = 1 , ac2 = 1) {\n  if( n <= 1 ) {return ac2};\n\n  return Fibonacci2 (n - 1, ac2, ac1 + ac2);\n}\n\nFibonacci2(100) // 573147844013817200000\nFibonacci2(1000) // 7.0330367711422765e+208\nFibonacci2(10000) // Infinity\n")])])]),r("h3",{attrs:{id:"_13-两个升序数组合并为一个升序数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_13-两个升序数组合并为一个升序数组"}},[t._v("#")]),t._v(" 13. 两个升序数组合并为一个升序数组")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function sort (A, B) {\n  var i = 0, j = 0, p = 0, m = A.length, n = B.length, C = []\n  while (i < m || j < n) {\n    if (i < m && j < n) {\n      C[p++] = A[i] < B[j] ? A[i++] : B[j++]\n    } else if (i < m) {\n      C[p++] = A[i++]\n    } else {\n      C[p++] = B[j++]\n    }\n  }\n  return C\n}\n")])])]),r("h2",{attrs:{id:"node相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node相关"}},[t._v("#")]),t._v(" node相关")]),t._v(" "),r("h3",{attrs:{id:"_1-node的router是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-node的router是什么"}},[t._v("#")]),t._v(" 1. node的router是什么")]),t._v(" "),r("h3",{attrs:{id:"_2-数据库索引是啥"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据库索引是啥"}},[t._v("#")]),t._v(" 2. 数据库索引是啥")]),t._v(" "),r("ul",[r("li",[t._v("狭义上: 索引是数据库针对每条数据自动生成的内部唯一id标识, 用以快速搜索定位数据")]),t._v(" "),r("li",[t._v("广义上: 是数据库根据每条数据形成的关键字, 将划分为树形结构, 便于sql语句对数据的查找, 使算法复杂度降低到O(logn)")])]),t._v(" "),r("h3",{attrs:{id:"_3-浏览器的事件循环和node事件循环有什么区别？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-浏览器的事件循环和node事件循环有什么区别？"}},[t._v("#")]),t._v(" 3. "),r("a",{attrs:{href:"https://www.jianshu.com/p/b221e6e36dcb",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器的事件循环和node事件循环有什么区别？"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("微任务执行时机不同：\nNode环境：微任务在事件循环的各个阶段的 空隙（中间）执行\n浏览器：微任务在事件循环的宏任务执行完后执行")]),t._v(" "),r("h3",{attrs:{id:"_4-关于buffer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-关于buffer"}},[t._v("#")]),t._v(" 4. 关于buffer")]),t._v(" "),r("ul",[r("li",[t._v("node中的核心对象："),r("code",[t._v("Buffer.from(str)")])]),t._v(" "),r("li",[t._v("用来存储二进制数据的类数组")]),t._v(" "),r("li",[t._v("用两位十六进制数表示一个字符的"),r("code",[t._v("unicode")]),t._v("编码")]),t._v(" "),r("li",[t._v("连续存储空间，快")]),t._v(" "),r("li",[t._v("1 byte = 8 bit")]),t._v(" "),r("li",[t._v("英文字符1 byte, 中文字符2 byte")])]),t._v(" "),r("h1",{attrs:{id:"计算机基础"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算机基础"}},[t._v("#")]),t._v(" 计算机基础")]),t._v(" "),r("ul",[r("li",[t._v("硬件：\n"),r("ul",[r("li",[t._v("CPU是人的大脑，负责运算")]),t._v(" "),r("li",[t._v("内存是人的记忆，负责临时存储")]),t._v(" "),r("li",[t._v("硬盘是人的笔记本，负责永久存储")]),t._v(" "),r("li",[t._v("输入设备是人的耳朵或眼睛，负责接受外部的信息传给CPU")]),t._v(" "),r("li",[t._v("以上所有的设备都通过总线连接，总线相当于人的神经")])])]),t._v(" "),r("li",[t._v("数据结构与算法：\n"),r("ul",[r("li",[t._v("算法：\n"),r("ul",[r("li",[t._v("定义：解决具体问题所需要的解决方法。")]),t._v(" "),r("li",[t._v("最优算法：执行效率最快的，时间复杂度最低。")]),t._v(" "),r("li",[t._v("特征：输入，输出，有穷性，确定性，可行性。")]),t._v(" "),r("li",[t._v("类型：冒泡排序，二叉树遍历，最长回文，二分查找，指针，链表等，堆栈，队列等。")]),t._v(" "),r("li",[t._v("途径：力扣，codewar，算法导论。")])])]),t._v(" "),r("li",[t._v("数据结构：\n"),r("ul",[r("li",[t._v("逻辑结构：集合、线性、树形、图形结构")]),t._v(" "),r("li",[t._v("物理结构：顺序、链式存储结构")])])])])]),t._v(" "),r("li",[t._v("操作系统：\n"),r("ul",[r("li",[t._v("定义：管理计算机硬件与软件资源的计算机程序，同时也是计算机系统的内核与基石")]),t._v(" "),r("li",[t._v("功能：\n"),r("ul",[r("li",[t._v("管理与配置内存")]),t._v(" "),r("li",[t._v("决定系统资源供需的优先次序")]),t._v(" "),r("li",[t._v("控制输入设备与输出设备")]),t._v(" "),r("li",[t._v("操作网络")]),t._v(" "),r("li",[t._v("管理文件系统")])])])])]),t._v(" "),r("li",[t._v("数据库：\n"),r("ul",[r("li",[t._v("关系型数据库比如MySQL、SQLServer、Oracle")]),t._v(" "),r("li",[t._v("非关系型数据库mongodb")])])]),t._v(" "),r("li",[t._v("计算机组成原理：硬件和软件")]),t._v(" "),r("li",[t._v("计算机网络：\n"),r("ul",[r("li",[t._v("定义：一些相互连接的、以共享资源为目的的、自治的计算机的集合")]),t._v(" "),r("li",[t._v("组成：计算机、网络操作系统、传输介质以及相应的应用软件四部分")]),t._v(" "),r("li",[t._v("功能：数据通信、资源共享、集中管理、分布式处理、负载均衡")]),t._v(" "),r("li",[t._v("分类：局域网LAN、无线网")]),t._v(" "),r("li",[t._v("网络协议TCP/IP")])])])])],1)}),[],!1,null,null,null);e.default=n.exports}}]);